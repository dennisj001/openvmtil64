            
                    
                    //  ) ) //  ) ) 
                 __//__  __//__     
                  //      //        
                 //      //         
                //      //     


    A traditional Forth system for UNIX and embedded systems


`ff` is available in pre-compiled, binary form and requires no additional 
libraries.

The following files are included in the distribution:

    boot/ff-<ARCH>-<OS>     Bootstrapping binaries for various architectures 
                            and operating systems
    README                  This file
    <ARCH>/generic.f        Pseudo-assembler, architecture specific
    <ARCH>/asm.f            Assemblers for some architectures
    <ARCH>/<OS>.f           System call implementations and magic numbers, 
                            architecture and OS specific
    <ARCH>/common.f         System call implementations common to several OSes
    unix.f                  Common I/O word implementations for UNIX-like OSes
    bare.f                  Stubs for I/O words for bare-metal platforms
    startup.f               Default startup code 
    core.f                  Core dictionary words
    meta.f                  Meta-compiler sources
    generic.f               Pseudo-assembler, generic part
    kernel.f                Source code for machine-code words
    endian.f                Words for endian-neutral cross compilation
    elf.f                   ELF binary generation
    macho.f                 Mach-O binary generation
    flat.f                  Flat binary generation
    multiboot.f             Binary generation for GRUB2 multiboot[11] format
    stuff.f                 Miscellaneous words
    blocks.f                Block- and buffer words
    decomp.f                Decompiler
    dbg.f                   Simple debugger
    unexec-<FORMAT>.f       Allows saving executable (for ELF + Mach-O formats)
    ed.f                    A minimal line-oriented block editor
    forth                   Tcl/Tk frontend
    metacompile             sh(1) script for meta-compiling a new Forth
    arch.sh                 sh(1) script to determine the current CPU
                            architecture
    os.sh                   sh(1) script to determine the current OS

The delivered bootstrap binaries (in `boot`) only contain the most basic
words, so you might want to add some extensions by loading additional
source files and creating a new executable:

    $ boot/ff-i386-linux
    include stuff.f
    include blocks.f
    include unexec-elf.f
    include decomp.f
    include dbg.f
    save ff
    bye

Now `ff` holds all added words and can be used just like one of the
bootstrap binaries. Include "unexec-macho.f" when on Mac OS X.

Should you intend to change the core system, you will have to "meta
compile" a new Forth system using an existing one. The `metacompile`
script does the necessary steps and produces a new image for a given
architecture and operating system. Enter

    metacompile -help

for a list of available options. Running `metacompile` with no arguments
will select the boot binary from `boot/` that matches the current 
architecture and OS and generate an executable for the same platform.

The script uses a bare bones Forth binary, loads some extensions and
then compiles the kernel and core words for the given target architecture
and OS. See the `metacompile` script for more details.

A number of additional files and scripts are available in the 
[`ff` development repository][1].

For more information, consult the `MANUAL`.


[1]: http://bitbucket.org/bunny351/ff
