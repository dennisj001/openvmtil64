
Int
bnOff
5
"\nstarting lisp.cft\n" ddps
Lisp
//lcReset
decimal
: sp ; //stack pause ; sp 
"lambda" tick _lambda find alias immediate
"/\" tick lambda find alias
"/." tick lambda find alias
"/|" tick lambda find alias
//(define list (lambda (args) (args)))

//verbosity 2 =
(+ 1 6)
'( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ( ( ( 12 ) ) 121 ) ) 13 ( 14 ) ) 15 ( 16 ( 17 ( 18 ) ) ) ) 
'( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) () ( ( ( ( 12 ) ) 121 ) 122 ) 13 ( 14 ( 141 ) ) 15 ( 16 (161 (162 (163)) ) ( 17 ( 18 ) ) ) ) ) 
( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ( ( ( 12 ) ) ) ) 13 ( 14 ) ) 15 ( 16 ( 17 ( 18 ) ) ) ) 
(+ 1 6) 
( - ( + 1 2 ( * 3 4 ) ( / 4 2 ) ( - 9 8 ) 10 770 ) 21 )  // == 777
( define f ( lambda x ( + x 1 ) ) ) 
( f 6 )
( begin ( define f ( lambda ( x ) ( + x 1 ) ) ) ( f 6 ) )
( + 1 2 4 )

( - ( + 1 2 ( * 3 4 ) ( / 4 2 ) ( - 9 8 ) 10 770 ) 21 )  // == 777 
( ( /\ x y ( + x y ) ) 3 4 )
( ( /\ ( x y z ) ( + x y z ) ) 3 4 70 ) // 77
( ( /\ ( x y z ) ( + x y z ) ) 3 4 70 ) 
( ( /\ ( x y z ) ( + x y z ) ) 3 4 70 ) 
( ( /\ ( x y z ) ( + x y z ) ) 3 4 70 ) 
( ( /\ ( x y z ) ( + x y z ) ) 3 4 70 ) // 77 

( ( /\ ( x y z ) ( + x y z ) ) ((/\ (x y) (+ x y)) 3 4) ((/\ (x y) (+ x y)) 50 10 ) ((/\ (x y) (+ x y)) 8 2 ) )  // 77
( ( /\ ( x y z ) ( + x y z ) ) ((/\ (x y) (/ x y)) 70 10) ((/\ (x y) (- x y)) 93 33 ) ((/\ (x y) (+ x y)) 8 2 ) )  // 77


( define x 7 )
( begin ( define x 2 ) ( + x 5 ) ( define x 14 ) ( / x 2 ) )
( begin ( define f0 ( /\ (x) ( + x 1 ) ) ) ( f0 6 ) )
( define f1 ( /\ (z) ( + z 1 ) ) ) 
//tick f1 find wdiss //pause
( f1 6 )
sp
( begin ( define f2 ( /\ ( x ) ( + x 3 ) ) ) ( f2 4 ) )
( begin ( define f3 ( /\ ( x ) ( + x 2 ) ) ) ( f3 5 ) )
( define f4 ( /\ ( x ) ( - x 2 ) ) )

( set zs1 77 abc 7 )
sp
( define zs1 78 )
( define f3 ( lambda ( x ) ( + x 8 ) ) ) ( f3 5 )
( define f4 ( lambda ( y ) ( - y 9 ) ) )

(f4 (f3 zs1) )

(quote zs1)

sp

( cond 1 7 0 )
( cond 0 0 7 )
( cond ( + 1 1 ) (+ 1 6 ) (+ 1 2 ) )
( cond ( + 0 0 ) ( + 1 2 ) ( + 0 0 ) ( + 1 2 ) ( + 0 0 ) ( + 1 2 ) (+ 1 6 ) )
( cond ( + 0 0 ) ( + 1 0 ) (+ 0 0 ) (+ 1 5 ) 7 )
( cond ( + 0 0 ) ( + 1 2 ) ( + 1 0 ) ( + 1 10 ) ( + 0 0 ) ( + 1 2 ) (+ 1 6 ) )
"\n cond :: should show 7 7 7 11\n" ps

sp
//lcReset
(define g ( /\ (a b c) (a b c) ) )
(define h ( /\ (a b c) (a c b) ) ) 

(g + 3 4 ) (g / 14 2 ) 
( h - 4 11 ) ( h - 5 12 ) ( h - 6 13 ) ( h / 9 63 ) ( h / 3 21 ) 
(define h1 ( lambda (c b a) (a b c) ) ) 
(h1 4 11 -) ( h1 5 12 -) ( h1 6 13 -) ( h1 9 63 / ) ( h1 3 21 / ) //pause

((/\ (x) (+ x 1)) 6 ) ((/\ (x) (+ x 1)) ((/\ (y) (+ y 2)) 4 ) )
sp

( g + ( g + 1 2 ) ( g + 2 2 ) ) 
( g + ( g * ( g + 3 4 ) ( g + (h - (h - 4 8) 8) 5 ) ) 14 )
( + ( h + 10 5 ) ( g + 7 ( + 3 (g + 4 5) 5) ) ( g + 7 31 ) ) 
(define pd +) (pd 1 2 4)
//pause

#if 1
"\n\nstarting BigNum\n" ddps
sp
BigNum
bnOn
bnInit ( 16 16 )
Lisp
//lcClearDefines
(define g ( /\ (a b c) (a b c) ) )
(define h ( /\ (a b c) (a c b) ) ) 
( h - 4 5 ) ( h - 5 4 ) ( h - 6 4 ) ( h / 9 3 ) ( h / 3 9 ) 
( g + ( g - 8 5 ) ( g + 1 3 ) ) 
( h + ( g - 5 8 ) ( g + 3 7 ) ) 
"\nending BigNum\n" ddps
//lcClearDefines
bnOff
sp
#endif
Lisp

(define a 3) (define b 4)
( a b 1 2 )
'( a b 1 2 ) 
#if 0
(set x ( a b 1 2 ))
#else
(define x ( a b 1 2 )) 
#endif
( 'x x ,x ,@x ) 
'( 'x x ,x ,@x ) 
`( 'x x ,x ,@x ) 
sp
#if 1 // test define
#if 0
(define y `( 'x x ,x ,@x ) )
#elif 0
(define y '( 'x x ,x ,@x ) )
#elif 1
(define y ( 'x x ,x ,@x ) )
#endif
#else // test set
#if 0
(set y `( 'x x ,x ,@x ) )
#elif 0
(set y '( 'x x ,x ,@x ) )
#elif 1
(set y ( 'x x ,x ,@x ) )
#endif
#endif
( 'y y ,y ,@y ) 
'( 'y y ,y ,@y ) 
`( 'y y ,y ,@y ) 
"\nlisp test\n" ddps location
(define a 3) (define b 4)
(define y ( a b 1 2 ))
(define x (7 8 9) ) 
(define y ( 1 2 a b 5 6 )) 
`( 'x x ,x ,@y ,@x y ) 
//pause
'( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ( ( ( 12 ) ) 121 ) ) 13 ( 14 ) ) 15 ( 16 ( 17 ( 18 ) ) ) ) 
( 1 2 ( 3 4 ) 5 6 ( 7 ( 8 ( 9 ) 10 11 ) ( ( ( ( 12 ) ) ) ) 13 ( 14 ) ) 15 ( 16 ( 17 ( 18 ) ) ) ) 
sp
((/\ (x) (+ x 1)) 6 ) ((/\ (x) (+ x 1)) ((/\ (y) (+ y 2)) 4 ) )
(define x (7 8 9 47))
(list 1 2 3 `x) 
(list 1 2 3 `,x )
(list 1 2 3 x )
(list 1 2 3 ,@x )
(+ 1 2 3 ,@x)
//pause

(define q1x (lambda (a) (a))) 
(define q2 q1x)
((q2 /) (q2 14) (q2 2)) 
(define q3 q2)
(define q4 q3)
(define q2 q4)

((q2 +) (q2 28) (q2 2)(q3 2) (q4 45))
sp
(( lambda ( x y ) ( + x y ) ) 3 4 ) 
(define yfac (lambda (yy n) (if* (< n 2) (1) (* n (yy yy (- n 1))))))
(yfac yfac 10) 
//pause
(yfac yfac 7) 
(define fibc (lambda ( n ) (ifElse (< n 2) n (+ (fibc (- n 1)) (fibc (- n 2))))))
"\nfibc 20 = " ps
(fibc 20)
tick fibc find wdiss //pause

//optimizeOff

( :: : hioo 3 4 + dup p ; : hio 5 6 + dup p ; hio hioo ) 7 _assert 11 _assert s // pause
( hioo ) ( hio ) 11 _assert 7 _assert hio hioo 7 _assert 11 _assert 
tick hioo find wdiss 
tick hio find wdiss //pause
lispOff
C
: bexp43 ( n ) { n @ 1 > } { n @ n @ -- bexp43 * } { 1 } ifElse ;
'bexp43 find wdiss //pause
7 C bexp43 dup 5040 "C : bexp43_assert" assert p 
sp
Lisp
( :: C : bexp44 ( n ) { n @ 1 > } { n @ n @ -- bexp44 * } { 1 } ifElse ; )
tick bexp44 find wdiss //pause
7 C bexp44 dup 5040 "C : bexp43_assert" assert p 

s
lispOff
: goedel3 (| n -- TOS ) 
    "\n goedel3 :: " ps 
    n 9 =
    { 
        (| n ) n @ p n 2 = n @ dup p 2 "goedel3_assert1" assert // first n should be garbage here; second n 2
        { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel3_assert2" assert } ix // first n should be garbage here; second 7
        //{ (| n ) n @ p n 3 = <dbg> n @ 4 + dup p 7 "goedel3_assert" assert } ix  // test comment //level 2
        n @ 6 + 8 "goedel3_assert4" assert 
    } ix
    { 
        (| n ) 
        n @ p 
        n 3 = 
        n dup @ 4 + = 
        n @ dup p 7 "goedel3_assert5" assert
    } ix // n should be garbage here
    n @ dup p
;
//' goedel3 find wdiss pause   
"goedel3 :: " ps 
9 goedel3 _assert0  "\ngoedel3 output should read (after ignoring _asserts) : \n'junk' 2 'junk' 7 'junk' 7 9" ps //pause
Debug Lisp // test comment
( :: 
    : goedel6 (| n -- TOS ) 
        "\n goedel6 :: " ps 
        n 9 =
        { 
            (| n ) n @ p n 2 = n @ dup p 2 "goedel6_1_assert" assert // first n should be garbage here; second n 2
            { (| n ) n @ p n 3 = n @ 4 + dup p 7 "goedel6_2_assert" assert } ix // first n should be garbage here; second 7
            n @ 6 + 8 "goedel6_3_assert" assert 
        } ix
        { (| n ) 
            n @ p 
            n 3 = 
            n dup @ 4 + = 
            n @ dup p 7 "goedel6_4_assert" assert 
        } ix // n should be garbage here
        n @ dup p
    ; ".I" typeSignature
    //' goedel6 find wdiss pause   
    9 goedel6 "goedel6_0_assert" assert
    "\ngoedel6 :: goedel6 output should read : \n'junk' 2 'junk' 7 7 'junk' 9" ps //pause
)
scOn
( ::
    "\ngoedel8 output : " ps  
    : goedel8 (| n -- TOS ) 
        n 1 =
        { 
            'n var n @ p 
            n 2 = n @ dup p 2 _assert0 // first n should be garbage here; second n 2
            //{ 'n var n @ p n 3 = n @ 4 + dup p 7 _assert0 } ix // first n should be garbage here; second 7
            { 'n var n @ p n 3 = n @ 4 + dup p 7 _assert0 } ix // first n should be garbage here; second 7
            n @ 6 + 8 _assert0 
        } ix
        { 
            'n var n @ p 
            n 3 = 
            n dup @ 7 + = 
            n @ dup p 10 _assert0 
        } ix // first n should be garbage here; second 7
        n @ 8 + dup p
    ;
    goedel8 9 _assert0 "\ngoedel8 output should read : \n'junk' 2 'junk' 7 'junk' 10 9" ps //pause
) 
//pause
tick goedel8 find wdiss 
sp
Lisp
//: sp ;
(list (1 2)) (list 1 2)
//pause

lispOff 
C
: sp ; //stack pause ; sp
"\nending lisp.cft\n" ddps

#if doScript
String
$ls -al /usr/local ; 
$etc/script ; 
$etc/lispScript ; 
: hi 1 2 + p ; hi nl
$ls  -al ;
//pause
s: hi ( a b | c ) c a @ b @ + = printf ("\n%d", c ) ;s 1 2 hi nl //pause
verbosity 1 =
sp
#endif
C
sp
Int
2 + 7 assertStkChk // stack checking
location 
sp


