Int
5
: sp stack pause ;
dbgOff 
Combinators
BigNum 
bnInit ( 0 0 )
: qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;
//: qexp { dup 1 <= } { drop 1 } { dup -- recurse * } ifElse ;
"!" ' qexp find alias
nl "64 ! = " ps 64 ! fprint nl 
x 1000 ! =
nl "1000 ! = " ps x @ fprint nl
: aexp { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;
'aexp find wdiss //sp
: bexp ( n -- TOS ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse ; 
: bexp0 ( n -- TOS ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse ; 
' bexp find wdiss ' bexp0 find wdiss

'!!! '! find alias 
: !! qexp p nl ;
'!! find wdiss
7 ! p 8 ! p 8 ! p
bno
#if 0
C
dlsym: printf /lib/x86_64-linux-gnu/libc.so.6 ; void_return
dlsym: strcmp /lib/x86_64-linux-gnu/libc.so.6 ; //eax_return
dlsym: sprintf /lib/x86_64-linux-gnu/libc.so.6 ; void_return
printf ("\n%s\n\t%s","hello world! - parse this!?", "\tand this!")"\n\talso this!" ps
printf ( "\nHello world! = 0x%08x\n\n" 1234 ) 
printf ( "\n%s = %d\n\n", "Hello world!", 42 ) 
printf("\n%s\n\t","hello world! - parse this!?")"\n\talso this!" ps
d: : tprintf printf ( "\nHello world! = 0x%08x\n\n" 1234 ) ; tprintf
: tprintf1 ( a b ) d: printf ( a @ b @ ) ; 
'tprintf find wdiss
'tprintf2 find wdiss
#endif
sp
BigNum
7 ! p 7 d: !! 8 !! 8 !!  
sp
: ! qexp ;
7 !!! p 8 !!! p
'!! 'qexp find alias
7 !! p 8 !! p p 8 !! p
sp
//pause
1000 ! p 

#if 0
x store
BigNum
d: : bexpl ( n | l ) { l x @ = n @ 1 <= } { 1 l @ fprint } { n @ dup 1 - bexpl * } ifElse ; 
7 d: bexpl //fprint 
sp 
: _bassert ( n m ) { n @ m @ != } { nl "error" ps _info pause } if ; 
5040 _bassert
#endif

nl "starting BigNum" ps nl
BigNum
bnInit ( 16 16 ) 
1 3 / fprint 
3 sqrt dup fprint dup * fprint //pause
sp
bigNumOff
Int
2 + 7 assertStkChk // stack checking
bno
 
