Int
5
: sp ; //stack pause ;
dbgOff 

#if 0
BigNum 
//d: dlsym: mpfr_printf /usr/local/lib/libmpfr.so ; void_return
d: dlsym: mpfr_sum /usr/local/lib/libmpfr.so ; void_return
d: dlsym: mpfr_printf /usr/local/lib/libmpfr.so ; void_return
//: mpfrp ( value ) mpfr_printf ( "%*.*Rf", 0, 0, value ) ;
//: !! qexp mpfrp nl ;
#endif

Combinators
BigNum 
bnInit ( 0 0 )
: qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;
//: qexp { dup 1 <= } { drop 1 } { dup -- recurse * } ifElse ;
"!" ' qexp find alias
nl "64 ! = " ps 64 ! p nl 
x 1000 ! =
nl "1000 ! = " ps x @ fprint nl
: aexp { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;
'aexp find wdiss //sp
: bexp ( n -- TOS ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse ; 
: bexp0 ( n -- TOS ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse ; 
' bexp find wdiss ' bexp0 find wdiss

7 ! p 8 ! p 8 ! p
nl 7 ! p

"!" ' qexp find alias
7 ! p 8 ! p
: !! qexp p nl ;
'!! find wdiss
7 !! 8 !! 8 !!   // this is not right still
sp
//pause
1000 ! p 
bno
#if 0
x store
BigNum
d: : bexpl ( n | l ) { l x @ = n @ 1 <= } { 1 l @ fprint } { n @ dup 1 - bexpl * } ifElse ; 
7 d: bexpl //fprint 
sp 
: _bassert ( n m ) { n @ m @ != } { nl "error" ps _info pause } if ; 
5040 _bassert
#endif

nl "starting BigNum" ps nl
BigNum
bnInit ( 16 16 ) 
1 3 / fprint 
3 sqrt dup fprint dup * fprint //pause
sp
bigNumOff
Int
2 + 7 assertStkChk // stack checking
bno
 
