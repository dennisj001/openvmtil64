5
"\nmath test\n" ddps
C
: sp ; //stack pause ;
Int
: mt 6 ++ ; mt 7 _assert
: mt1 8 -- ; mt1 7 _assert
//: mta 1 5 + d: ++ ; mta 7 _assert
//: mt1a 9 1 - --  ; mt1a 7 _assert
: mt2 ( n ) ++ n @ 7 _assert ; 6 mt2 
: mt3 ( n ) n @ ++ 7 _assert ; 6 mt3 
: mt4 ( n ) n ++ n @ 7 _assert ; 6 mt4 
'mt5v var
: mt5 mt5v 6 = ++ mt5v @ 7 _assert ; mt5

#if 1
C
: t* ( a b -- TOS ) a @ b @ * ; 3 4 t* 12 _assert0
: t+ ( a b ) a @ b @ + 7 _assert ; 3 4 t+ 
: t* ( a b c d -- TOS ) a @ b @ c @ d @ * * * ; 
// ' t* find wdiss 
1 2 3 4 t* 24 _assert
: t+ ( a b c d -- TOS ) a @ b @ c @ d @ + + + ; 
//' t+ find wdiss 
1 2 3 4 t+ 10 _assert
: hi ( n -- TOS ) n @ 2 / 2 / 2 / 2 / dup nl p ; 32 hi 
"\n 2 :: above line should show" ps //pause
2 _assert
' hi find wdiss
: hi ( n -- TOS ) 32 n @ / n @ / n @ / n @ / dup p ; 2 hi 2 _assert0
' hi find wdiss

// test shift op equal
: moe ( n m -- TOS) n m @ <<= n @ dup p ; 
' moe find wdiss
2 6 moe 128 _assert 1 16 moe 65536 _assert "\nshould show 128 65536\n" ps // s pause
: moe ( n m ) n m @ >>= n @ p ;
' moe find wdiss
128 6 moe 65536 16 moe "\nshould show 2 1\n" ps s // pause
infixOn
nl
: moe ( n m ) n <<= m n @ p ;
' moe find wdiss
2 6 moe 1 16 moe "\nshould show 128 65536\n" ps // s pause
: moe ( n m ) n >>= m n @ p ;
' moe find wdiss
128 6 moe 65536 16 moe "\nshould show 2 1\n" ps // s pause
infixOff
//pause
c_syntaxOn
void cmoe ( n m -- TOS ) { n <<= m ; dup(n) ; p (n) ; }  cmoe ( 2 6 ) ; 128 _assert0 cmoe ( 1 16 ) ; 65536 _assert0 "\nshould show 128 65536\n" ps // s pause
void cmoe ( n m -- TOS ) { n >>= m ; dup(n) ; p (n) ; } cmoe ( 128 6 ) ; 2 _assert0 cmoe ( 65536 16 ) ; 1 _assert0 "\nshould show 2 1\n" ps s // pause
c_syntaxOff
//pause

: moe ( n m -- TOS ) n m @ *= n @ dup p ;
' moe find wdiss // s pause
2 3 moe 6 _assert0 4 5 moe 20 _assert0 "\nshould show 6 20\n" ps // s pause
: moe ( n m -- TOS ) n m @ /= n @ dup p ;
' moe find wdiss 
8 2 moe 4 _assert 32 8 moe 4 _assert "\nshould show 4 4\n" ps // s pause
: moe2 ( n ) n 2 /= n @ p ;
' moe2 find wdiss 
8 moe2 32 moe2 "\nshould show 4 16\n" ps // s pause
: moe3 ( n m -- TOS ) n m @ &= n @ dup p ;
// ' moe3 find wdiss 
nl 2 3 moe3 2 _assert0 5 7 moe3 5 _assert0 "\nshould show 2 5\n" ps // s pause
#endif

: t64bitAdd ( n m -- TOS ) n @ m @ + dup p ; hex 0x100000000 2 t64bitAdd 0x100000002 _assert
: t64bitAdd2 ( n m -- TOS ) 0x100000000 n @ + m @ + dup p ; 
't64bitAdd2 find wdiss
hex 1 2 t64bitAdd2 0x100000003 _assert //pause
nl 789654321 9087654321 * dup p binary p decimal

2 + 7 assertStkChk // stack checking

