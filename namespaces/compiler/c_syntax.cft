
5 
User
: sp ; //stack pause ;
location
//dbgOn 
//verbosity 4 =

// maybe we're shooting for a "smart syntactic language" that will parse "poetic" syntactic arrangements
#if 1 // if 0
optimizeOn inlineOn 
System Interpreter Combinators C C_Combinators
C String
"Dlsym" namespace Dlsym "libc" namespace libc
#if 1 //Zenfone2 @ not
libc.printf ("\nhello %d\n", 7) //pause
#endif
C
User
c_syntaxOn
libc
#if 1 // if 1
typedef _CObj
{
    int64 hi ;
    char chars [ 32 ] ;
    int64 hey ;
    int64 heey2 ;
    char chars2 [ 32 ] ;
    int64 heey ;
    int64 heey1 ;
} cobj, CObj ;
Class
"CObj.size =" ps p ( CObj.size ) ;
"chey" CObj new 
CObj
chey.hi = 1234 ;
chey.chars [2] = 255 ;
chey.heey = #x0123456789abcdef ; // doesn't work : still 32 bit limited ints
dump ( chey, chey.size ) ;
chey chey.size dump
chey.heey1 = #x12345678 ;
#if 1 // if 2
chey.heey2 = chey.heey1 ; // #x12345678 ; 
chey.hey = chey.heey2 ; // #x12345678 ;
#else
chey.heey2 = #x12345678 ; 
chey.hey = #x12345678 ;
#endif // if 2 endif
chey.chars [23] = 255 ;
chey.chars [18] = #b10110 ; // #x16
chey.hey = #x12345678 ;
dump ( chey, cobj.size ) ; 

p ( cobj.size ) ; 
' chey hex p
//logOn sl using
p ( chey.hey ) ;
p ( & chey.hey ) ;

decimal
var ( "x7" ) ;
x7 = &chey.chars [ 18 ] ;
sprintf ( x7, "%s", "\n\thoot" ) ;
printf ( "%s", x7 ) ;

sprintf ( &chey.chars, "%s", "well" ) ;
dump ( &chey, cobj.size ) ; 
sprintf ( &chey.chars [ 24 ], "%s", "well" ) ;
dump ( &chey, cobj.size ) ; 

printf ( "\n\t%s\n", &chey.chars [ 24 ] ) ;
printf ( "\n\t%s\n", "hoot" ) ; //&chey.chars [ 24 ] ) ;
dump ( &chey, cobj.size ) ; // add '&' within parentheses for lvalue

scOn
void
chi ( chey0, d | a b c )
{
    libc
    //<dbg> c = 1 + 2 ;
    c = 1 + 2 ;
    b = c + 2 ;
    a = b + c ;
    nl
    p ( c ) ; c @ 3 "c should be 3" assert // 3
    p ( b ) ; b @ 5 "b should be 5" assert // 5
    p ( a ) ; a @ 8 "a should be 8" assert // 8
    dump ( cobj.chey0, cobj.size ) ; 
    d = cobj.chey0.hey ;
    hex p ( d ) ;
    printf ( "\n chi : d = %lx\n", d ) ;
    sprintf ( &cobj.chey0.chars, "\n\t\they = %lx", d ) ; // add '&' within parentheses for lvalue
    printf ( "\n chi : d = %lx\n", d ) ;
    sprintf ( &cobj.chey0.chars2, "\n\t\they hey = %lx", cobj.chey0.hey ) ;
    printf ( "\n cobj.chey0.chars = %s\n", &cobj.chey0.chars ) ;
    printf ( "\n cobj.chey0.chars2 = %s\n", &cobj.chey0.chars2 ) ;
    printf ( "\n chi : d = %lx\n", d ) ;
    d = cobj.chey0.hey ;
    printf ( "\n%lx\n", d ) ;
    printf ( "\n chi : d = %lx\n", d ) ;
    d #x12345678 _assert
    printf ( "\n%x\n", cobj.chey0.hey ) ;
    sprintf ( &chey0.chars [ 24 ], "%s", "hoot" ) ;
    dump ( &cobj.chey0, cobj.size ) ; 
} prefix
wdiss ( ' chi find )
chi ( chey, 7 ) //pause
scOff
#endif // if 1 : endif
//s pause
#if 1 // if 1
void
interpret2 ( | atoken aword ) 
{
    nl tab () ; ps ( "interpret2 :> " ) ; nl
    while ( 1 )
    {   
        atoken = token () ; 
        if ( ! ( strcmp ( atoken, "i2halt" ) ) ) 
        { 
            return ; 
        }
        // test comment here
        else
        // test comment here
        {
            if ( atoken )
            {       
                aword = tokenToWord ( atoken ) ;
                doWord ( aword ) ;
            }       
        }
    }
}
#else
void
interpret2 ( | atoken aword ) 
{
    //testc1 () ; pause () ;
    //nl() ; tab () ; 
    ps ( "interpret2 :> " ) ; nl () ;
    while ( 1 )
    {   
        atoken = token () ; 
        //printf ( "\n\ttoken = %s", atoken ) ; 
        if ( ! ( strcmp ( atoken, "i2halt" ) ) ) 
        { 
            return ; 
        }
        else
        {
            if ( atoken )
            {       
                aword = tokenToWord ( atoken ) ;
                doWord ( aword ) ;
            }       
        }
    }
}
#endif // if 1 : endif

wdiss ( ' interpret2 find ) ;

#if 1 // if 1
interpret2 
using
int
fac4 ( n  | facc -- TOS ) 
{ 
    int facc = 1 ;
    while ( n > 1 ) 
    {
        facc = n -- * facc ;
    }
    return ( facc ) ;
}
wdiss ( ' fac4 find ) ; 
fac4 ( 7 ) dup p 5040 _assert0 //s pause

User
c_syntaxOff
'interpret3 'interpret2 find alias
interpret3 words // i2halt code to exit interpret2

: hi1 1 2 + p ;  
: hey1 hi1 hi1 ; 
: heey1 hey1 hey1 hey1 ;
nl heey1 
#if 1 // if 2
c_syntaxOn
int
faccs2 ( n | rec ) 
{
    for ( rec = 1 ; n > 1 ; n-- )
    { 
        rec = rec * n ; 
    } 
    return rec ;
}
' faccs2 find wdiss
faccs2 ( 7 ) dup p 5040 _assert0 apause
// sp
void
interpret4 ( | atoken aword ) 
{
    //nl() ; tab () ; ps ( "interpret2 :> " ) ; nl () ;
    while ( 1 )
    {   
        atoken = token () ; 
        //printf ( "\n\ttoken = %s", atoken ) ; 
        if ( ! ( strcmp ( atoken, "i2halt" ) ) ) 
        { 
            return ; 
        }
        else
        {
            if ( atoken )
            {       
                aword = tokenToWord ( atoken ) ;
                doWord ( aword ) ;
            }       
        }
    }
}

interpret4
int
faccs3 ( n | rec ) 
{
    for ( rec = 1 ; n > 1 ; n-- )
    { 
        rec = rec * n ; 
    } 
    return rec ;
}
' faccs3 find wdiss
faccs3 ( 7 ) p //pause
c_syntaxOff
//verbosity 2 = //verbosity @ p pause
#endif // if 2 : endif

i2halt // see above in interpret2
i2halt // for second interpret3 
i2halt // for third interpret4
#endif // if 1 : endif
//sp 
#endif // if 0 : endif
//pause
#if 1 // if 0
c_syntaxOn
C String libc
//"buffer0" Buffer new ; 
typedef struct { byte buf [ 256 ]; } Buffer0 ;
// nb. this is a mess mainly for testing purposes 
//dbgOn
s
dscOn
#if 0 // if 1
void
$ ( | atoken, buffer, buffer1, Buffer0 buffer0 ) 
{
#if dbOn  
    <dbg> buffer = &buffer0.buf ;
#else
    buffer = &buffer0.buf ;
#endif
    memset ( buffer, 0, Buffer.size ) ; 
#if 0
    buffer1 = &buffer1.buf ;
    memset ( buffer1, 0, Buffer.size ) ; 
    //sprintf ( buffer, "%s", "" ) ;
    while ( atoken = token () ) 
#endif
    while ( atoken = token () ) 
    {   
        //printf ( "\n\ttoken = %s\n", atoken ) ; //pause () ;
#if 0 // if 2
        if ( strcmp ( atoken, ";" ) )
        { 
            strcat ( buffer, atoken ) ;
            if ( strcmp ( atoken, "." ) )
            {
                strcat ( buffer, " " ) ;
            }
            //printf ( "\n\tbuffer = %s\n", buffer ) ; //pause () ;
        }
        else
        {
#if 1 
            {
                d: printf ( "\n\tbuffer = %s\n", buffer ) ; //pause () ;
            }
#endif
            //<dbg> sh ( buffer ) ;
            sh ( buffer ) ;
            break ; 
        }
#else // test internal c compiler
#if 1
        if ( ! strcmp ( atoken, ";" ) ) 
#else
        strcpy ( buffer1, atoken ) ;
        if ( buffer1.buf [0] == ';' )
#endif
        { 
            printf ( "\n\tbuffer = %s\n", buffer ) ; //pause () ;
            sh ( buffer ) ;
            break ; 
        }
        // test comment here
        else 
        // test comment here
        { 
            //strcat ( buffer, atoken ) ;
            strcat ( buffer, atoken ) ;
            if ( strcmp ( atoken, "." ) )
            {
                strcat ( buffer, " " ) ;
            }
        }
#endif // if 2 : endif
    }
} 
#elif 1 // if 1 : elif
void
$ ( | atoken, buffer, buffer1, Buffer buffer0 ) 
{
    buffer = &buffer0.buf ;
    memset ( buffer, 0, Buffer0.size ) ; 
    while ( atoken = token () ) 
    {   
        printf ( "\n\ttoken = %s\n", atoken ) ; //pause () ;
        if ( ! strcmp ( atoken, ";" ) ) 
        { 
            printf ( "\n\tbuffer = %s\n", buffer ) ; //pause () ;
            sh ( buffer ) ;
            break ; 
        }
        else 
        { 
            strcat ( buffer, atoken ) ;
            if ( strcmp ( atoken, "." ) )
            {
                strcat ( buffer, " " ) ;
            }
        }
    }
} 
#else // if 1 : else
dbgOff
void
$ ( | atoken, buffer, buffer1, Buffer buffer0 ) 
{
#if dbgOnVar @  
    //<dbg>
    //_s () ;
    buffer = &buffer0.buf ;
    printf ( "\nsize = %d", Buffer.size ) ; 
    memset ( buffer, 0, Buffer.size ) ; 
    //sprintf ( buffer, "%s", "" ) ;
    printf ( "\n\tbuffer = \'%s\'\n", buffer ) ; //pause () ;
#else
    buffer = &buffer0.buf ;
    memset ( buffer, 0, Buffer.size ) ; 
#endif
#if dbOn  
    //<dbg> 
#endif
    while ( atoken = token () ) 
    {   
        //printf ( "\n\ttoken = %s\n", atoken ) ; //pause () ;
#if 1 // if 2
        if ( libc.strcmp ( atoken, ";" ) )
        { 
            strcat ( buffer, atoken ) ;
            if ( strcmp ( atoken, "." ) )
            {
                strcat ( buffer, " " ) ;
            }
            //printf ( "\n\tbuffer = %s\n", buffer ) ; //pause () ;
        }
        else
        {
#if 1
            {
                printf ( "\n\tbuffer = %s\n", buffer ) ; //pause () ;
            }
#endif
#if dbOn  
            //<dbg> 
#endif
            sh ( buffer ) ;
            break ; 
        }
#else // if 2 : else : test internal c compiler
#if 1
        if ( ! strcmp ( atoken, ";" ) ) 
#else
        strcpy ( buffer1, atoken ) ;
        if ( buffer1.buf [0] == ';' )
#endif
        { 
            printf ( "\n\tbuffer = %s\n", buffer ) ; //pause () ;
            sh ( buffer ) ;
            break ; 
        }
        // test comment here
        else 
        // test comment here
        { 
            //strcat ( buffer, atoken ) ;
            strcat ( buffer, atoken ) ;
            if ( strcmp ( atoken, "." ) )
            {
                strcat ( buffer, " " ) ;
            }
        }
#endif // if 2 : endif
    }
    _s () ;
#if dbOn  
    //<dbg> 
#endif
} 
#endif // if 1 : endif
dscOff

#if doScript 
"\n\nnew $ test\n" ps
void
'$ find wdiss //pause
$etc/script ; 
$etc/lispScript ; 
$ls -al . ; 
//pause
String
$$ls -al /usr/local ; $$ls -al . ;
//pause
dscOff
c_syntaxOff
#endif

#endif // if 0 : endif
sp
dbgOff verbosity 1 =
s: hi ( a b | c ) c a @ b @ + = printf ("\nshould read 3 : %d", c ) ;s 1 2 hi //pause
2 + 7 assertStkChk // stack checking

