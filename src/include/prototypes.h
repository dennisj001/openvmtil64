/* src/basis/compiler/machineCode.c */
void _Compile_Write_Instruction_X64(Boolean rex, uint8 opCode0, uint8 opCode1, Boolean modRm, int16 controlFlags, Boolean sib, int64 disp, Boolean dispSize, int64 imm, Boolean immSize);
Boolean RegParameterOrder(Boolean n);
int64 CalculateSib(int64 scale, int64 indexReg, int64 baseReg);
byte _CalculateRex(Boolean reg, Boolean rm, Boolean sib, int64 operandSize);
void _Compile_ImmDispData(int64 immDisp, Boolean size, Boolean forceFlag);
uint8 Calculate_Rex(Boolean reg, Boolean rm, Boolean rex_w_flag, Boolean rex_b_flag);
Boolean CalculateModRegardingDisplacement(Boolean mod, int64 disp);
uint8 CalculateModRmByte(Boolean mod, Boolean reg, Boolean rm, Boolean sib, int64 disp);
void Compile_CalculateWrite_Instruction_X64(uint8 opCode0, uint8 opCode1, Boolean mod, uint8 reg, Boolean rm, uint16 controlFlags, Boolean sib, uint64 disp, uint8 dispSize, uint64 imm, uint8 immSize);
void Compile_Move(uint8 direction, uint8 mod, uint8 reg, uint8 rm, uint8 operandSize, uint8 sib, int64 disp, uint8 dispSize, int64 imm, uint8 immSize);
void Compile_Move_WithSib(uint8 direction, Boolean mod, Boolean reg, Boolean rm, Boolean scale, Boolean index, Boolean base);
void Compile_Move_Reg_To_Rm(Boolean rm, Boolean reg, int64 disp, byte size);
void Compile_Move_Rm_To_Reg(Boolean rm, Boolean reg, int64 disp, byte size);
void Compile_Move_Reg_To_Reg(Boolean dstReg, int64 srcReg, byte size);
void Compile_MoveImm(Boolean mod, Boolean rm, int64 disp, int64 imm, Boolean immSize);
void Compile_MoveImm_To_Reg(Boolean rm, int64 imm, Boolean immSize);
void Compile_MoveImm_To_Mem(Boolean rm, int64 imm, Boolean immSize);
void Compile_MoveMemValue_To_Reg(Boolean reg, byte *address, Boolean iSize);
void Compile_MoveMemValue_ToReg_ThruReg(Boolean reg, byte *address, Boolean iSize, Boolean thruReg);
void Compile_MoveReg_ToAddress_ThruReg(Boolean reg, byte *address, Boolean thruReg);
void _Compile_SetAtAddress_WithReg(int64 *address, int64 reg, int64 thruReg);
void _Compile_Move_Literal_Immediate_To_Reg(int64 reg, int64 value, int size);
void _Compile_X_Group1(Boolean code, Boolean toRegOrMem, Boolean mod, Boolean reg, Boolean rm, Boolean sib, int64 disp, Boolean operandSize);
void _Compile_X_Group1_Reg_To_Reg(Boolean code, Boolean dstReg, int64 srcReg);
void _Compile_X_Group1_Immediate(Boolean code, Boolean mod, Boolean rm, int64 disp, uint64 imm, Boolean iSize);
void _Compile_XOR_AL_1_Immediate(void);
void Compile_X_Group1(Compiler *compiler, int64 op, int64 ttt, int64 n);
void _Compile_Group2(Boolean mod, Boolean regOpCode, Boolean rm, int64 controlFlags, Boolean sib, int64 disp, int64 imm);
void _Compile_Group2_CL(Boolean mod, Boolean regOpCode, Boolean rm, Boolean sib, int64 disp);
void _Compile_Group3(Boolean code, Boolean mod, Boolean rm, Boolean controlFlags, Boolean sib, int64 disp, int64 imm, Boolean size);
void _Compile_Group5(Boolean code, Boolean mod, Boolean rm, Boolean sib, int64 disp, Boolean size);
void Compile_X_Group5(Compiler *compiler, int64 op);
void _Compile_LEA(Boolean reg, Boolean rm, Boolean sib, int64 disp);
void _Compile_TEST_Reg_To_Reg(Boolean dstReg, int64 srcReg, Boolean size);
void Compile_TEST_Reg_To_Reg(Boolean dstReg, int64 srcReg);
void _Compile_IMUL(Boolean mod, Boolean reg, Boolean rm, Boolean sib, int64 disp, uint64 imm);
void Compile_IMULI(Boolean mod, Boolean reg, Boolean rm, Boolean sib, int64 disp, uint64 imm);
void Compile_IMUL(Boolean mod, Boolean reg, Boolean rm, Boolean controlFlags, Boolean sib, int64 disp);
void _Compile_Test(Boolean mod, Boolean reg, Boolean rm, Boolean controlFlags, int64 disp, int64 imm);
byte *Calculate_Address_FromOffset_ForCallOrJump(byte *address);
int32 _CalculateOffsetForCallOrJump(byte *offsetAddress, byte *jmpToAddr, byte insn);
byte *CalculateAddressFromOffset(byte *compileAtAddress, int32 offset);
void _SetOffsetForCallOrJump(byte *offsetAddress, byte *jmpToAddr, byte insn);
void _Compile_JumpToDisp(int64 disp, byte insn);
void _Compile_JumpToAddress(byte *jmpToAddr, byte insn);
void _Compile_JumpToRegAddress(Boolean reg);
byte *Compile_UninitializedJumpEqualZero(void);
void _Compile_UninitializedJmpOrCall(Boolean jmpOrCall);
void _Compile_JumpWithOffset(int64 disp);
byte *_Compile_UninitializedCall(void);
byte *Compile_UninitializedJump(void);
void _Compile_CallReg(Boolean reg, Boolean regOrMem);
void Compile_CallThru_AdjustRSP(Boolean reg, Boolean regOrMem);
void Compile_Call(byte *address);
void _Compile_Call_ThruReg_TestAlignRSP(Boolean thruReg);
void Compile_Call_ToAddressThruReg_TestAlignRSP(byte *address, Boolean thruReg);
void Compile_Call_ToAddressThruR8_TestAlignRSP(void);
void Compile_Call_TestRSP(byte *address);
void Compile_Call_X84_ABI_RSP_ADJUST(byte *address);
void Compile_CallWord_Check_X84_ABI_RSP_ADJUST(Word *word);
void _Compile_PushReg(Boolean reg);
void _Compile_PopToReg(Boolean reg);
void _Compile_PopFD(void);
void _Compile_PushFD(void);
void Compile_TEST_AL_ImmByte(byte imm);
void _Compile_INT80(void);
void _Compile_Noop(void);
void _Compile_MOVZX_BYTE_REG(Boolean reg, Boolean rm);
void _Compile_Return(void);
/* src/basis/compiler/_compile.c */
void _Compile_Call_Acc(void);
void Compile_DataStack_PopAndCall(void);
void Compile_Call_From_C_Address(uint64 bptr);
void Compile_CallCFunctionWithParameter_TestAlignRSP(byte *cFunction, Word *word);
void Compile_Call_CurrentBlock(void);
void _Compile_RspReg_To(void);
void _Compile_RspReg_Drop(void);
void _Compile_RspReg_Get(void);
void _Compile_RspReg_Fetch(void);
void _Compile_RspReg_From(void);
void _Compile_GetVarLitObj_RValue_To_Reg(Word *word, int64 reg, int size);
void Do_ObjectOffset(Word *word, int64 reg);
void Compile_GetVarLitObj_RValue_To_Reg(Word *word, int64 reg, int size);
void _Compile_SetVarLitObj_With_Reg(Word *word, int64 reg, int64 thruReg);
void _Compile_GetVarLitObj_LValue_To_Reg(Word *word, int64 reg, int size);
/* src/basis/compiler/memory.c */
void Compile_TosRmToTOS(void);
void _Compile_Set_C_LValue_WithImm_ThruReg(byte *address, int64 value, Boolean rm, byte operandSize);
void _Compile_Get_C_Value_ToReg(Boolean reg, int64 value);
void _Compile_GetRValue_FromLValue_ToReg(Boolean reg, byte *address);
void _Compile_Get_FromCAddress_ToReg_ThruReg(Boolean reg, byte *address, Boolean thruReg);
void _Compile_Set_CAddress_WithRegValue_ThruReg(byte *address, Boolean reg, Boolean thruReg);
void Compile_Peek(Compiler *compiler, Boolean stackReg);
void Compiler_ShowOptimizeArgs(Compiler *compiler);
void Compile_Store(Compiler *compiler, int lvalueSize);
void Compile_Poke(Compiler *compiler, int lvalueSize);
void Compile_AtEqual(Boolean stackReg);
/* src/basis/compiler/combinators.c */
void CFT_EndCombinator(int64 quotesUsed, int64 moveFlag);
BlockInfo *CFT_BeginCombinator(int64 quotesUsed);
void CFT_DropBlock(void);
void CFT_BlockRun(void);
void CFT_LoopCombinator(void);
int64 CFT_WhileCombinator(void);
int64 CFT_DoWhileCombinator(void);
void CFT_If1Combinator(void);
void CFT_If2Combinator(void);
void CFT_TrueFalseCombinator2(void);
void CFT_TrueFalseCombinator3(void);
void CFT_IfElseCombinator(void);
void CFT_If3Combinator(void);
void CFT_DoWhileDoCombinator(void);
void CFT_ForCombinator(void);
/* src/basis/compiler/math.c */
int64 Abs(int64 x);
void Compile_Minus(Compiler *compiler);
void Compile_Plus(Compiler *compiler);
void Compile_Multiply(Compiler *compiler);
void _Compile_Divide(Compiler *compiler, uint64 type);
void Compile_Divide(Compiler *compiler);
void Compile_Mod(Compiler *compiler);
void _Compile_optInfo_X_Group1(Compiler *compiler, int64 op);
void _CFT_Do_IncDec(int64 op);
/* src/basis/compiler/cpu.c */
void _CpuState_Show(Cpu *cpu);
void _Compile_CpuState_SaveSelected(Cpu *cpu);
void _Compile_CpuState_RestoreSelected(Cpu *cpu);
void Compile_CpuState_Save(Cpu *cpu);
void _Compile_CpuState_Restore(Cpu *cpu, int64 cStackRegFlag);
void Compile_CpuState_Restore(Cpu *cpu);
Cpu *_CpuState_Copy(Cpu *dst, Cpu *src);
Cpu *CpuState_Copy(Cpu *cpu0, uint64 type);
Cpu *CpuState_New(uint64 type);
Cpu *CpuState_SaveCopyCurrent(Cpu *cpu);
Cpu *CFT_CpuState_SaveCopyCurrent(void);
Cpu *Debugger_CpuState_SaveCopyCurrent(void);
void _CpuState_Restore(Cpu *cpu);
void CpuState_Save(void);
void CpuState_Restore(void);
/* src/basis/compiler/mcPrimitives.c */
void Compile_WordRun(void);
void _CFT_MachineCodePrimitive_NewAdd(const char *name, uint64 morphismAttributes, int64 objectAttributes, block *callHook, byte *function, int64 functionArg, const char *nameSpace, const char *superNamespace);
void CFT_MachineCodePrimitive_AddWords(CfrTil *cfrTil);
/* src/basis/compiler/stack.c */
void _Compile_Stack_Drop(Boolean stackReg);
void _Compile_Stack_DropN(Boolean stackReg, int64 n);
void _Compile_DropN_Rsp(int64 n);
void _Compile_SetStackN_WithObject(Boolean stackReg, int64 n, int64 obj);
void _Compile_Stack_Push(uint8 stackReg, uint8 thruReg, int64 obj);
void _Compile_StackPtrLValue_PushObj(uint64 stkPtrLvalue, Boolean tempStkReg, int64 obj);
void _Compile_StackPtrLValue_PopToReg(uint64 stkPtrLvalue, Boolean tempStkReg, Boolean reg);
void _Compile_Move_StackN_To_Reg(Boolean reg, Boolean stackReg, int64 index);
void _Compile_Move_Reg_To_StackN(Boolean stackReg, int64 index, Boolean reg);
void _Compile_Move_StackNRm_To_Reg(Boolean reg, Boolean stackReg, int64 index);
void _Compile_Move_Reg_To_StackNRm_UsingReg(Boolean stackReg, int64 index, Boolean reg, Boolean ureg);
void _Compile_Stack_PushReg(Boolean stackReg, Boolean reg);
void _Compile_Stack_PopToReg(Boolean stackReg, Boolean reg);
void Compile_Stack_PushACCUM(Boolean stackReg);
void Compile_Move_TOS_To_ACCUM(Boolean stackReg);
void Compile_Move_ACC_To_TOS(Boolean stackReg);
void Compile_Pop_To_Acc(Boolean stackReg);
void Compile_Pop_ToAcc_AndCall(Boolean stackReg);
void Compile_MoveImm_To_TOS(Boolean stackReg, int64 imm, Boolean size);
void _Compile_Stack_Dup(Boolean stackReg);
void _Compile_Stack_Pick(Boolean stackReg);
void _Compile_Stack_Swap(Boolean stackReg);
void Compile_DataStack_PushR8(void);
void _Compile_RspReg_Push(int64 value);
void Compile_DspPop_RspPush(void);
void Compile_Set_DspReg_FromDataStackPointer(void);
void Compile_Set_DataStackPointer_FromDspReg(void);
/* src/basis/compiler/logic.c */
void _BI_Set_Tttn(BlockInfo *bi, Boolean setTtn, Boolean setNegFlag, Boolean jccTtt, Boolean jccNegFlag, byte *jccLogicCode);
void BI_Set_Tttn(BlockInfo *bi, Boolean setTtn, Boolean setNegFlag, Boolean jccTtt, Boolean jccNegFlag);
void Compiler_Set_BI_Tttn(Compiler *compiler, Boolean setTtn, Boolean setNegFlag, Boolean jccTtt, Boolean jccNegFlag);
void _Compile_TestCode(Boolean reg, Boolean size);
void BI_CompileRecord_TestCode_Reg(BlockInfo *bi, Boolean reg, Boolean size);
void BI_CompileRecord_TestCode_ArgRegNum(BlockInfo *bi, uint8 argRegNum);
BlockInfo *Compiler_BI_CompileRecord_TestCode_Reg(Compiler *compiler, Boolean reg, Boolean size, Boolean force);
Boolean _COI_GetReg(CompileOptimizeInfo *optInfo, Boolean regNumber);
void Compiler_BI_CompileRecord_TestCode_ArgRegNum(Compiler *compiler, Boolean argRegNum);
void Compiler_BI_CompileRecord_TestCode_Set_Tttn(Compiler *compiler, Boolean reg, Boolean setTtn, Boolean setNegFlag, Boolean jccTtt, Boolean jccNegFlag, Boolean force);
void _Compile_GetTestLogicFromTOS(BlockInfo *bi);
void _Compile_LogicResultForStack(int64 reg, Boolean setTtn, Boolean setNegFlag);
BlockInfo *Compiler_Set_LogicCode(Compiler *compiler, Boolean setTtn, Boolean setNegFlag, Boolean jccTtt, Boolean jccNegFlag);
void _Compile_LogicalAnd(Compiler *compiler);
void Compile_LogicalAnd(Compiler *compiler);
void _Compile_LogicalNot(Compiler *compiler);
void _Compile_SETcc(Boolean setTtn, Boolean setNegFlag, Boolean reg);
void _Compile_SETcc_Tttn_REG(Compiler *compiler, Boolean setTtn, Boolean setNegFlag, Boolean jccTtt, Boolean jccNegFlag, Boolean reg, Boolean rm);
void Compile_Cmp_Set_Tttn_Logic(Compiler *compiler, Boolean setTtn, Boolean setNegateFlag, Boolean jccTtt, Boolean jccNegFlag);
void Compile_Equals(Compiler *compiler);
void Compile_DoesNotEqual(Compiler *compiler);
void Compile_LessThan(Compiler *compiler);
void Compile_GreaterThan(Compiler *compiler);
void Compile_LessThanOrEqual(Compiler *compiler);
void Compile_GreaterThanOrEqual(Compiler *compiler);
void Compile_TestLogicAndStackPush(Compiler *compiler, Boolean reg, Boolean setNegFlag, Boolean jccTtt, Boolean jccNegFlag);
void Compile_Logical_X(Compiler *compiler, int64 op, Boolean setTtn, Boolean setNegateFlag, Boolean jccTtt, Boolean jccNegFlag);
void Compile_LogicalNot(Compiler *compiler);
byte *_Compile_Jcc(int64 setNegFlag, int64 setTtn, byte *jmpToAddr, byte insn);
byte *_BI_Compile_Jcc(BlockInfo *bi, byte *jmpToAddress);
byte *BI_Compile_Jcc(BlockInfo *bi, Boolean setTtn, byte *jmpToAddress);
byte *Compiler_Compile_Jcc(Compiler *compiler, int64 bindex, Boolean setTtn);
void CFT_If_ConditionalExpression(void);
void CFT_Else(void);
void CFT_EndIf(void);
/* src/basis/core/dataObjectRun.c */
void Object_Run(Word *word);
void _DataObject_Run(Word *word0);
void DataObject_Run(void);
void Do_Variable(Word *word, Boolean rvalueFlag, Boolean isForwardDotted);
void CFT_Do_Variable(Word *word, Boolean rvalueFlag, Boolean isForwardDotted, Boolean isReverseDotted);
void _Do_Compile_Variable(Word *word, Boolean rvalueFlag);
void _Do_LiteralValue(int64 value);
void CFT_Do_LiteralWord(Word *word);
void _Do_LocalObject_AllocateInit(Namespace *typeNamespace, byte **value, int64 size);
void Do_LocalObject(Word *word, Boolean rvalueFlag, Boolean isForwardDotted);
void Compile_C_FunctionDeclaration(byte *token1);
void _Compile_C_TypeDeclaration(void);
void Compile_C_TypeDeclaration(byte *token0);
void _Namespace_Do_C_Type(Namespace *ns);
void Namespace_Do_C_Type(Namespace *ns, Boolean isForwardDotted);
void CFT_Do_ClassField(Word *word, Boolean isForwardDotted, Boolean rvalueFlag);
void CFT_Do_LispSymbol(Word *word);
void Array_Do_AccumulatedAddress(int64 totalOffset);
void Do_AccumulatedAddress(byte *accumulatedOffsetPointer, int64 offset, Boolean rvalueFlag, byte size);
void CFT_Do_AccumulatedAddress(Word *word, byte *accumulatedAddress, int64 offset, Boolean rvalueFlag);
void CFT_Dot(void);
void _Word_CompileAndRecord_PushReg(Word *word, int64 reg, Boolean recordFlag);
void Compiler_Save_C_BackgroundNamespace(Compiler *compiler);
void Compiler_SetAs_InNamespace_C_BackgroundNamespace(Compiler *compiler);
/* src/basis/core/block.c */
void _Block_Eval(block blck);
void Block_Eval(block blck);
void Dbg_Block_Eval(Word *word, block blck);
/* src/basis/compiler/blocks.c */
BlockInfo *BI_Block_Copy(BlockInfo *bi, byte *dstAddress, byte *srcAddress, int64 bsize, Boolean optSetupFlag);
void Compile_BlockLogicTest(BlockInfo *bi);
byte *Block_CopyCompile(byte *srcAddress, int64 bindex, Boolean jccFlag);
void CFT_TurnOffBlockCompiler(void);
void CFT_TurnOnBlockCompiler(void);
BlockInfo *_CFT_BeginBlock0(void);
BlockInfo *_CFT_BeginBlock1(BlockInfo *bi);
void _CFT_BeginBlock2(BlockInfo *bi);
void CFT_BeginBlock(void);
void CFT_FinalizeBlocks(BlockInfo *bi);
void _CFT_EndBlock1(BlockInfo *bi);
byte *_CFT_EndBlock2(BlockInfo *bi);
void CFT_EndBlock(void);
BlockInfo *BlockInfo_New(void);
/* src/basis/core/conditionals.c */
CaseNode *_CaseNode_New(uint64 type, block block, int64 value);
void _CFT_Case(uint64 allocType);
void CFT_Case(void);
void Switch_MapFunction(dlnode *node, uint64 switchValue);
void SwitchAccessFunction(void);
void CFT_Switch(void);
/* src/basis/compiler/compile.c */
void _Compile_C_Call_1_Arg(byte *function, int64 arg);
void _CompileN(byte *data, int64 size);
void _CompileFromUptoRET(byte *data);
void _Compile_WordInline(Word *word);
void _CompileFromName(byte *wordName);
void _CompileFromName_Inline(byte *wordName);
void _AdjustGotoInfo(dlnode *node, int64 originalAddress);
void AdjustGotoJmpOffsetPointer(dlnode *node, int64 address);
void AdjustLabel(dlnode *node, int64 address);
void _GotoInfo_SetAndRemove(GotoInfo *gotoInfo, byte *address, Boolean removeFlag);
void _InstallGotoPoint_Key(dlnode *node, int64 blockInfo, int64 key);
void _CheckForGotoPoint(dlnode *node, int64 key, int64 *status);
void _RemoveGotoPoint(dlnode *node, int64 key, int64 *status);
void _CFT_InstallGotoCallPoints_Keyed(BlockInfo *bi, int64 key);
void CFT_AdjustLabels(byte *srcAddress);
int64 CFT_CheckForGotoPoints(int64 key);
int64 CFT_RemoveGotoPoints(int64 key);
/* src/basis/core/_system.c */
void _System_TimerInit(System *system, int64 i);
void _System_Time(System *system, uint64 timer, char *format, byte *toString);
void System_Time(System *system, uint64 timer, char *string, int64 tflag);
void System_InitTime(System *system);
void _System_Copy(System *system, System *system0);
System *System_Copy(System *system0, uint64 type);
void _System_Init(System *system);
void System_Init(System *system);
System *System_New(uint64 type);
/* src/basis/compiler/optimize.c */
int64 _Compiler_CheckOptimize(Compiler *compiler, int64 _specialReturn);
int64 Compiler_CheckOptimize(Compiler *compiler, int64 specialReturn);
Word *Compiler_CheckForOpBetweenParentheses(CompileOptimizeInfo *optInfo, dlnode *snode);
void _Compiler_GetWordStackState(Compiler *compiler, Word *word);
int64 Compiler_Optimize(Compiler *compiler, Word *word);
void Compiler_SetStandardPreHere_ForDebugDisassembly(Compiler *compiler);
void Compiler_SetupArgsToStandardLocations(Compiler *compiler);
void Compiler_Optimizer_2_Args_And_1_Literal(Compiler *compiler);
void Compiler_Optimizer_2Args_Or_WordArg1_Op(Compiler *compiler);
void Compiler_Optimizer_0Args(Compiler *compiler);
void Compiler_Optimizer_1Arg(Compiler *compiler);
void Compiler_Optimizer_WordArg2Op_Or_xBetweenArg1AndArg2(Compiler *compiler);
void Compile_StandardArg(Word *word, Boolean reg, Boolean rvalueFlag, byte *setHere, Boolean setScaFlag);
void Compile_StackArgsToStandardRegs(Compiler *compiler);
Boolean CheckForRegisterVariable(Compiler *compiler, Boolean reg);
void Setup_MachineCodeInsnParameters(Compiler *compiler, Boolean direction, Boolean mod, Boolean reg, Boolean rm, int64 disp, Boolean forceSet);
void Word_Set_StackPushRegisterCode_To_Here(Word *word);
void _Set_To_Here_Word_StackPushRegisterCode(Word *word, Boolean setDebugFlag);
Boolean Word_Check_ReSet_To_Here_StackPushRegisterCode(Word *word, Boolean setDebugFlag);
Word *Compile_Optimize_EqualCheck(Compiler *compiler);
void Do_OptimizeOp2Literals(Compiler *compiler);
void Compiler_CompileOptimize_IncDec(Compiler *compiler);
void Compiler_CompileOptimizedLoad(Compiler *compiler);
void Compile_Optimize_Dup(Compiler *compiler);
void Compile_X_OpEqual(Compiler *compiler, block op);
void Compile_X_Equal(Compiler *compiler, int64 op, int lvalueSize);
void PeepHole_Optimize_ForStackPopToReg(void);
void PeepHole_Optimize(void);
void GetRmDispImm(CompileOptimizeInfo *optInfo, Word *word, int64 suggestedReg);
void CompileOptimizedLoad_TOS(void);
/* src/basis/compiler/bit.c */
void Compile_X_Group3(Compiler *compiler, int64 code);
void Compile_X_Shift(Compiler *compiler, int64 op, Boolean stackFlag, Boolean opEqualFlag);
void Compile_BitWise_NOT(Compiler *compiler);
void Compile_BitWise_NEG(Compiler *compiler);
void Compile_ShiftLeft(void);
void Compile_ShiftRight(void);
/* src/basis/compiler/udis.c */
void _Udis_PrintInstruction(ud_t *ud, byte *address, byte *prefix, byte *postfix);
int64 _Udis_GetInstructionSize(ud_t *ud, byte *address);
ud_t *_Udis_Init(ud_t *ud);
int64 Debugger_UdisOneInstruction(Debugger *debugger, byte *address, byte *prefix, byte *postfix);
int64 _Udis_Disassemble(ud_t *ud, byte *iaddress, int64 number, int64 cflag);
/* src/basis/compiler/arrays.c */
int64 _CheckArrayDimensionForVariables_And_UpdateCompilerState(void);
void Compile_ArrayDimensionOffset(Word *word, int64 dimSize, int64 objSize);
int64 CalculateArrayDimensionSize(Word *arrayBaseObject, int64 dimNumber);
int64 Do_NextArrayToken(Word *tokenWord, byte *token, Word *arrayBaseObject, int64 objSize, Boolean saveCompileMode, Boolean *variableFlag);
void Arrays_DoArrayArgs_NonLisp(Lexer *lexer, byte *token, Word *arrayBaseObject, int64 objSize, Boolean saveCompileMode, Boolean *variableFlag);
void _CFT_ArrayBegin(Boolean lispMode, Word **pl1, int64 *i);
void CFT_ArrayBegin(void);
void CFT_ArrayEnd(void);
void CFT_ArrayModeOff(void);
/* src/basis/core/io.c */
int64 GetTerminalWidth(void);
char kbhit(void);
int64 _Key(FILE *f);
void Kbhit_Pause(void);
int64 Key_Kbhit(FILE *f);
int64 Key(void);
byte _CFT_Key(ReadLiner *rl);
void _CFT_PrintString(byte *string);
void _CFT_PrintChar(byte c);
void Emit(byte c);
void Context_DoPrompt(Context *cntx);
void CFT_DoPrompt(void);
void _Printf(byte *format, ...);
/* src/basis/core/symbol.c */
void _Symbol_NameInit(Symbol *symbol, byte *name);
void _Symbol_Init_AllocName(Symbol *symbol, byte *name, uint64 allocType);
Symbol *__Symbol_New(uint64 allocType);
Symbol *_Symbol_New(byte *name, uint64 allocType);
Symbol *Symbol_New(byte *name);
Symbol *Symbol_NewValue(int64 value, uint64 allocType);
Symbol *Symbol_CompareName2(Symbol *symbol, byte *name, Namespace *ns);
Symbol *_Symbol_CompareName(Symbol *symbol, byte *name);
Symbol *Symbol_CompareName(Symbol *symbol, byte *name);
/* src/basis/repl.c */
void _Repl(block repl);
/* src/basis/core/syntax.c */
void Interpret_DoParenthesizedRValue(void);
void Interpret_C_Block_EndBlock(byte *tokenToUse, Boolean insertFlag);
void Interpret_C_Block_BeginBlock(byte *tokenToUse, Boolean insertFlag);
int64 CFT_Interpret_C_Blocks(int64 blocks, Boolean takesAnElseFlag, Boolean semicolonEndsThisBlock);
void CFT_C_LeftParen(void);
void _CFT_C_Infix_EqualOp(block op);
void CFT_IncDec(int64 op);
void CFT_C_ConditionalExpression(void);
Boolean Syntax_AreWeParsingACFunctionCall(Lexer *lexer);
int64 IsLValue_String_CheckForwardToStatementEnd(byte *nc);
int64 Lexer_CheckForwardToStatementEnd_Is_LValue(Lexer *lexer, Word *word);
Boolean Lexer_IsLValue_CheckBackToLastSemiForParenOrBracket(Lexer *lexer, Word *word);
Boolean Lexer_IsLValue_CheckForwardToNextSemiForArrayVariable(Lexer *lexer, Word *word);
Boolean Is_LValue(Context *cntx, Word *word);
Boolean Lexer_IsTokenReverseDotted(Lexer *lexer);
Boolean ReadLiner_IsTokenForwardDotted(ReadLiner *rl, int64 index);
Boolean _Lexer_IsTokenForwardDotted(Lexer *lexer, int64 end);
Boolean Lexer_IsTokenForwardDotted(Lexer *lexer);
int64 _CFT_Parse_Typedef_Field(void);
int64 _CFT_Parse_Typedef_Field0(void);
/* src/basis/core/dataObjectNew.c */
Word *DataObject_New(uint64 type, Word *word, byte *name, uint64 morphismAttributes, uint64 objectAttributes, uint64 lispAttributes, int64 index, int64 value, Namespace *addToNs, int allocType, int64 tsrli, int64 scwi);
byte *_CFT_NamelessObjectNew(int64 size, int64 allocType);
Word *_CFT_ObjectNew(int64 size, byte *name, uint64 category, int64 allocType);
void _Class_Object_Init(Word *word, Namespace *ins);
Word *_Class_Object_New(byte *name, uint64 category);
Namespace *Class_New(byte *name, uint64 objectType, int64 cloneFlag);
Word *CFT_ClassField_New(byte *token, Class *aclass, int64 size, int64 offset);
Word *_CFT_Variable_New(byte *name, int64 value);
byte *_CFT_Label(byte *lname);
Word *Literal_New(Lexer *lexer, uint64 uliteral);
Namespace *_Namespace_New(byte *name, Namespace *containingNs);
/* src/basis/cfrtil64.c */
void CFT_Run(CfrTil *cfrTil, int64 restartCondition);
void CFT_RunInit(void);
void _CFT_ReStart(CfrTil *cfrTil, int64 restartCondition);
void _CFT_CpuState_CheckSave(void);
void CFT_CpuState_Show(void);
void CFT_CpuState_Current_Show(void);
void CFT_CpuState_CheckShow(void);
void CFT_Debugger_CheckSaveCpuStateShow(void);
void CFT_Debugger_UdisOneInsn(void);
void CFT_Debugger_State_CheckSaveShow(void);
void CFT_Debugger_SaveCpuState(void);
void CFT_PrintReturnStackWindow(void);
void _CFT_NamespacesInit(CfrTil *cfrTil);
void _CFT_DataStack_Init(CfrTil *cfrTil);
void CFT_DataStack_Init(void);
void _CFT_Init(CfrTil *cfrTil, Namespace *nss);
void CFT_ResetMemory(CfrTil *cfrTil);
CfrTil *_CFT_New(CfrTil *cfrTil);
void CFT_OptimizeOn(void);
void _CFT_OptimizeOff(void);
void CFT_OptimizeOff(void);
void CFT_StringMacrosOn(void);
void CFT_StringMacrosOff(void);
void CFT_InlineOn(void);
void CFT_InlineOff(void);
/* src/basis/core/parse.c */
void TDSCI_DebugPrintWord(TypeDefStructCompileInfo *tdsci, Word *word);
Boolean Parser_Check_Do_CommentWord(Word *word);
Boolean Parser_Check_Do_Debug_Token(byte *token);
byte *TDSCI_ReadToken(TypeDefStructCompileInfo *tdsci);
void TDSCI_Init(TypeDefStructCompileInfo *tdsci);
TypeDefStructCompileInfo *TypeDefStructCompileInfo_New(void);
void CFT_Parse_Error(byte *msg, byte *token);
void Parse_ArrayField(TypeDefStructCompileInfo *tdsci);
void Parse_Do_Identifier(TypeDefStructCompileInfo *tdsci, int64 t_type, int64 size);
void Parse_Identifier_Field(TypeDefStructCompileInfo *tdsci, int64 t_type, int64 size);
void Parse_Structure(TypeDefStructCompileInfo *tdsci);
void Parse_StructOrUnion_Type(TypeDefStructCompileInfo *tdsci, int64 structOrUnionState);
void Parse_Type_Field(TypeDefStructCompileInfo *tdsci, Namespace *type0);
void Parse_A_Typedef_Field(TypeDefStructCompileInfo *tdsci);
void Compiler_TypedObjectInit(Word *word, Namespace *typeNamespace);
Namespace *_CFT_Parse_LocalsAndStackVariables(int64 svf, int64 lispMode, ListObject *args, Stack *nsStack, Namespace *localsNs);
void Lexer_ParseAsAString(Lexer *lexer);
void _Lexer_ParseBinary(Lexer *lexer, int64 offset);
void Lexer_ParseBinary(Lexer *lexer, byte *token, int64 offset);
void Lexer_ParseBigNum(Lexer *lexer, byte *token);
Boolean Lexer_ScanForHexInt(Lexer *lexer, byte *token);
void _Lexer_ParseHex(Lexer *lexer, byte *token);
void _Lexer_ParseDecimal(Lexer *lexer, byte *token);
void Lexer_ParseObject(Lexer *lexer, byte *token);
byte *Parse_Macro(int64 type);
void Lexer_ParseDoubleQuoteMacro(Lexer *lexer);
void _CFT_SingleQuote(void);
/* src/basis/core/memSpace.c */
byte *_mmap_AllocMem(int64 size);
void mmap_FreeMem(byte *chunk, int64 size);
byte *mmap_AllocMem(int64 size);
void MemChunk_Show(MemChunk *mchunk);
void _MemChunk_WithSymbol_Show(MemChunk *mchunk, int64 flag);
void _MemChunk_Account(MemChunk *mchunk, int64 flag);
void _Mem_ChunkFree(MemChunk *mchunk);
byte *_Mem_ChunkAllocate(int64 size, uint64 allocType);
ByteArray *_ByteArray_AppendSpace_MakeSure(ByteArray *ba, int64 size);
byte *_ByteArray_AppendSpace(ByteArray *ba, int64 size);
byte *Mem_Allocate(int64 size, uint64 allocType);
void Mem_FreeItem(dllist *mList, byte *item);
void FreeChunkList(dllist *list);
void FreeNba_BaNode(NamedByteArray *nba, dlnode *node);
void FreeNba_BaList(NamedByteArray *nba);
void NBA_FreeChunkType(Symbol *s, uint64 allocType, int64 exactFlag);
NamedByteArray *MemorySpace_NBA_New(MemorySpace *memSpace, byte *name, int64 size, int64 allocType);
void OVT_FreeTempMem(void);
void MemorySpace_Init(MemorySpace *ms);
MemorySpace *MemorySpace_New(void);
NamedByteArray *_OVT_Find_NBA(byte *name);
void _OVT_MemList_FreeNBAMemory(NamedByteArray *nba, uint64 moreThan, int64 always);
void NamedByteArray_Delete(NamedByteArray *nba, Boolean reinitFlag);
void OVT_MemList_DeleteNBAMemory(byte *name, Boolean reinitFlag);
void OVT_MemList_FreeNBAMemory(byte *name, uint64 moreThan, int64 always);
void OVT_MemListFree_ContextMemory(void);
void OVT_MemListFree_TempObjects(void);
void OVT_MemListFree_LispSpace(void);
void OVT_MemListFree_CompilerTempObjects(void);
void OVT_MemListFree_LispTemp(void);
void OVT_MemListFree_Session(void);
void OVT_MemListFree_Buffers(void);
void OVT_MemListFree_HistorySpace(void);
void _OVT_MemListFree_CfrTilInternal(void);
void _NBAsMemList_FreeTypes(int64 allocType, int64 exactFlag);
void NBAsMemList_FreeExactType(int64 allocType);
void NBAsMemList_FreeVariousTypes(int64 allocType);
void NBA_Show(NamedByteArray *nba, int64 flag);
void NBA_AccountRemainingAndShow(NamedByteArray *nba, Boolean flag);
void OVT_ShowNBAs(OpenVmTil *ovt, int64 flag);
int64 _OVT_ShowPermanentMemList(OpenVmTil *ovt);
void _Calculate_TotalNbaAccountedMemAllocated(OpenVmTil *ovt, Boolean showFlag);
void Calculate_TotalNbaAccountedMemAllocated(OpenVmTil *ovt, int64 flag);
void _OVT_ShowMemoryAllocated(OpenVmTil *ovt);
byte *OVT_CheckRecycleableAllocate(dllist *list, int64 size);
void OVT_Recycle(dlnode *anode);
void Word_Recycle(Word *w);
void _CheckRecycleWord(Word *w);
void CheckRecycleNamespaceWord(Node *node);
void DLList_Recycle_NamespaceList(dllist *list);
void DLList_RemoveWords(dllist *list);
void _CheckCodeSpaceForRoom(int64 memDesired);
void CheckCodeSpaceForRoom(void);
/* src/basis/init.c */
void CFT_RuntimeInit(CfrTil *cfrTil, int64 cntxDelFlag);
void OVT_RuntimeInit(void);
void _CFT_Init_SessionCore(CfrTil *cfrTil, Boolean cntxDelFlag, Boolean promptFlag);
void CFT_SessionInit(void);
void CFT_ResetAll_Init(CfrTil *cfrTil);
void _CFT_InitialAddWordToNamespace(Word *word, byte *containingNamespaceName, byte *superNamespaceName);
void _CFT_CPrimitiveNewAdd(const char *name, byte *pb_TypeSignature, uint64 opInsnGroup, uint64 opInsCode, block b, uint64 morphismAttributes, uint64 objectAttributes, uint64 lispAttributes, const char *nameSpace, const char *superNamespace);
void CFT_AddCPrimitives(void);
/* src/basis/system.c */
void *_dlsym(byte *sym, byte *lib);
void *_Dlsym(byte *sym, byte *lib);
Word *Dlsym(byte *sym, byte *lib);
void CFT_Dlsym(void);
void CFT_system0(void);
void CFT_system1(void);
void CFT_system2(void);
void CFT_system3(void);
void _CFT_WordAccounting_Print(byte *functionName);
void CFT_WordAccounting(byte *functionName);
byte *_CFT_GetSystemState_String0(byte *buf);
byte *_CFT_GetSystemState_String1(byte *buf);
byte *Convert_RestartCondtion(int64 restartCondition);
void _CFT_SystemState_Print(int64 pflag);
void __CFT_Dump(byte *address, int64 number, int64 dumpMod);
void _CFT_Source(Word *word, int64 addToHistoryFlag);
void _CFT_Dump(int64 dumpMod);
Boolean _AtCommandLine(void);
Boolean AtCommandLine(ReadLiner *rl);
/* src/basis/core/charSet.c */
Boolean CharTable_IsCharType(byte c, uint64 type);
int64 CharSet_IsDelimiter(CharSet *cset, byte ch);
void CharSet_SetChar(CharSet *cset, byte ch);
void CharSet_UnSetChar(CharSet *cset, byte ch);
CharSet *CharSet_Init(CharSet *cset, int64 size, byte *initString);
CharSet *CharSet_Allocate(int64 size, uint64 allocType);
CharSet *_CharSet_New(byte *initString, int64 size, uint64 allocType);
CharSet *CharSet_New(byte *initString, uint64 allocType);
/* src/basis/core/dllist.c */
dobject *_dllist_PushNew_M_Slot_Node(dllist *list, int64 allocType, int64 typeCode, int64 m_slots, ...);
void List_Push(dllist *list, dlnode *node);
dlnode *List_Pop(dllist *list);
dlnode *List_Top(dllist *list);
int64 dobject_Get_M_Slot(dobject *dobj, int64 m);
void dobject_Set_M_Slot(dobject *dobj, int64 m, int64 value);
void List_Set_N_Node_M_Slot(dllist *list, int64 n, int64 m, int64 value);
int64 List_Get_N_Node_M_Slot(dllist *list, int64 n, int64 m);
int64 List_GetN_Value(dllist *list, int64 n);
int64 List_Pick_Value(dllist *list, int64 n);
int64 List_Pop_1Value(dllist *list);
dlnode *List_Pick(dllist *list, int64 n);
void List_SetN_Value(dllist *list, int64 n, int64 value);
void List_SetTop_Value(dllist *list, int64 value);
int64 List_Top_Value(dllist *list);
int64 List_Depth(dllist *list);
int64 List_Length(dllist *list);
void List_Push_1Value_NewNode_T_WORD(dllist *list, int64 value, int64 allocType);
void _List_PushNew_ForWordList(dllist *list, Word *word, int64 inUseFlag);
void _List_PushNew_1Value(dllist *list, int64 allocType, int64 typeCode, int64 value);
void List_PushNew_T_WORD(dllist *list, int64 value, int64 allocType);
void _dlnode_Init(dlnode *node);
dlnode *_dlnode_New(uint64 allocType);
dlnode *Is_NotHeadNode(dlnode *anode);
dlnode *_dlnode_Next(dlnode *anode);
dlnode *Is_NotTailNode(dlnode *anode);
dlnode *dlnode_Next(dlnode *node);
dlnode *dlnode_Previous(dlnode *node);
void dlnode_InsertThisAfterANode(dlnode *thisNode, dlnode *aNode);
void dlnode_InsertThisBeforeANode(dlnode *thisNode, dlnode *aNode);
void dlnode_Remove(dlnode *node);
void dlnode_ReplaceNodeWithANode(dlnode *node, dlnode *anode);
void dlnode_Replace(dlnode *replacedNode, dlnode *replacingNode);
void _dllist_Init(dllist *list);
void dllist_Init(dllist *list, dlnode *n_After, dlnode *n_Before);
dllist *_dllist_New(uint64 allocType);
dllist *dllist_New(void);
void dllist_ReInit(dllist *list);
int64 dllist_Depth(dllist *list);
void _dllist_AddNodeToHead(dllist *list, dlnode *node);
void dllist_AddNodeToHead(dllist *list, dlnode *node);
void _dllist_AddNodeToTail(dllist *list, dlnode *node);
void dllist_AddNodeToTail(dllist *list, dlnode *node);
dlnode *dllist_Head(dllist *list);
dlnode *dllist_Tail(dllist *list);
dlnode *_dllist_First(dllist *list);
dlnode *dllist_First(dllist *list);
dlnode *dllist_Last(dllist *list);
dlnode *dllist_NodePrevious(dllist *list, dlnode *node);
dlnode *_dllist_Before(dllist *list);
dlnode *dllist_SetCurrentNode_Before(dllist *list);
dlnode *_dllist_After(dllist *list);
dlnode *dllist_SetCurrentNode_After(dllist *list);
void _dllist_AddNamedValue(dllist *list, byte *name, int64 value, uint64 allocType);
void _dllist_PushNode(dllist *list, dlnode *node);
dlnode *_dllist_PopNode(dllist *list);
void _dllist_DropN(dllist *list, int64 n);
void _dllist_RemoveNodes(dlnode *first, dlnode *last);
dlnode *_dllist_Get_N_Node(dllist *list, int64 n);
int64 _dllist_Get_N_InUse_Node_M_Slot(dllist *list, int64 n, int64 m);
int64 _dllist_Get_N_Node_M_Slot(dllist *list, int64 n, int64 m);
void _dllist_Set_N_Node_M_Slot(dllist *list, int64 n, int64 m, int64 value);
void _dllist_MapNodes_UntilWord(dlnode *first, VMapNodeFunction mf, Word *word);
void dllist_Map4_FromFirstFlag_Indexed(dllist *list, Boolean fromFirst, MapFunction4 mf, int64 one, int64 two, int64 three);
void dllist_Map2_FromFirstFlag(dllist *list, MapFunction2 mf, int64 one, int64 two, int64 fromFirstFlag);
void dllist_Map(dllist *list, MapFunction0 mf);
void dllist_Map1_FromEnd(dllist *list, MapFunction1 mf, int64 one);
void dllist_Map1(dllist *list, MapFunction1 mf, int64 one);
int64 dllist_Map1_WReturn(dllist *list, MapFunction1 mf, int64 one);
void dllist_Map2_FromEnd(dllist *list, MapFunction2 mf, int64 one, int64 two);
void dllist_Map2(dllist *list, MapFunction2 mf, int64 one, int64 two);
void dllist_Map2_WithBreak(dllist *list, MapFunction2 mf, int64 one, int64 two);
void dllist_Map2_FromLast(dllist *list, MapFunction2 mf, int64 one, int64 two);
int64 dllist_Map3(dllist *list, MapFunction3 mf, int64 one, int64 two, int64 three);
void dllist_Map_OnePlusStatus(dllist *list, MapFunction2 mf, int64 one, int64 *status);
void Tree_Map_Namespaces_State_2Args(dllist *list, uint64 state, MapSymbolFunction2 mf, int64 one, int64 two);
void Tree_Map_Namespaces(dllist *list, MapSymbolFunction mf);
Word *Tree_Map_OneNamespace(Word *word, MapFunction_1 mf, int64 one);
Word *Tree_Map_OneNamespace_TwoArgs(Namespace *ns, MapFunction_2 mf2, int64 one, int64 two);
Word *Tree_Map_State_OneArg(uint64 state, MapFunction_1 mf, int64 one);
void List_N_M_Node_PrintWords(dllist *alist);
/* src/basis/core/interpret.c */
Word *_Interpreter_TokenToWord(Interpreter *interp, byte *token, int64 tsrli, int64 scwi);
Word *Interpreter_InterpretAToken(Interpreter *interp, byte *token, int64 tsrli, int64 scwi);
void Interpreter_InterpretNextToken(Interpreter *interp);
Word *Interpreter_DoWord_Default(Interpreter *interp, Word *word0, int64 tsrli, int64 scwi);
void Interpreter_DoInfixWord(Interpreter *interp, Word *word);
void _Interpreter_DoPrefixWord(Context *cntx, Interpreter *interp, Word *word);
void Interpreter_DoPrefixWord(Context *cntx, Interpreter *interp, Word *word);
void Interpreter_C_PREFIX_RTL_ARGS_Word(Word *word);
Boolean Interpreter_DoInfixOrPrefixWord(Interpreter *interp, Word *word);
void Interpreter_DoWord(Interpreter *interp, Word *word, int64 tsrli, int64 scwi);
Word *Interpreter_ReadNextTokenToWord(Interpreter *interp);
Boolean Word_IsSyntactic(Word *word);
void Interpreter_SetLexState(Interpreter *interp);
/* src/basis/core/lexer.c */
void Lexer_Exception(byte *token, uint64 exceptionNumber, byte *message);
Word *Lexer_ParseToken_ToWord(Lexer *lexer, byte *token, int64 tsrli, int64 scwi);
void Lexer_Set_ScIndex_RlIndex(Lexer *lexer, Word *word, int64 tsrli, int64 scwi);
byte *_Lexer_LexNextToken_WithDelimiters(Lexer *lexer, byte *delimiters, Boolean checkListFlag, Boolean peekFlag, int reAddPeeked, uint64 state);
void Lexer_Init(Lexer *lexer, byte *delimiters, uint64 state, uint64 allocType);
byte Lexer_NextNonDelimiterChar(Lexer *lexer);
void _CFT_AddTokenToTailOfTokenList(byte *token);
void CFT_PushToken_OnTokenList(byte *token);
Symbol *Lexer_GetTokenFromTokenList(Lexer *lexer, Boolean peekFlag);
byte *Lexer_GetTokenNameFromTokenList(Lexer *lexer, Boolean peekFlag);
Symbol *Lexer_Token_New(byte *token);
int64 _Lexer_ConsiderDebugAndCommentTokens(byte *token, int64 evalFlag);
byte *_Lexer_Next_NonDebugOrCommentTokenWord(Lexer *lexer, byte *delimiters, Boolean evalFlag, Boolean peekFlag);
Boolean Lexer_IsNextWordLeftParen(Lexer *lexer);
Boolean Lexer_IsWordPrefixing(Lexer *lexer, Word *word);
byte *Lexer_Peek_Next_NonDebugTokenWord(Lexer *lexer, Boolean evalFlag, Boolean svReadIndexFlag);
void Lexer_DoChar(Lexer *lexer, byte c);
void Lexer_DoNextChar(Lexer *lexer);
void Lexer_LexNextToken_WithDelimiters(Lexer *lexer, byte *delimiters);
byte *_Lexer_ReadToken(Lexer *lexer, byte *delimiters);
byte *Lexer_ReadToken(Lexer *lexer);
void _Lexer_AppendByteToTokenBuffer(Lexer *lexer, byte c);
void Lexer_AppendByteToTokenBuffer(Lexer *lexer);
void Lexer_Append_ConvertedCharacterToTokenBuffer(Lexer *lexer);
void Lexer_AppendCharacterToTokenBuffer(Lexer *lexer);
byte Lexer_UnAppendCharacterToTokenBuffer(Lexer *lexer);
byte Lexer_LastChar(Lexer *lexer);
void Lexer_SetTokenDelimiters(Lexer *lexer, byte *delimiters, uint64 allocType);
Lexer *Lexer_New(uint64 allocType);
void _Lexer_Copy(Lexer *lexer, Lexer *lexer0, uint64 allocType);
Lexer *Lexer_Copy(Lexer *lexer0, uint64 allocType);
void Lexer_RestartToken(Lexer *lexer);
void Lexer_SourceCodeOn(Lexer *lexer);
void Lexer_SourceCodeOff(Lexer *lexer);
void _Lexer_AppendCharToSourceCode(Lexer *lexer, byte c, int64 convert);
void Lexer_DoDelimiter(Lexer *lexer);
Boolean Lexer_IsCurrentInputCharADelimiter(Lexer *lexer);
void Lexer_Default(Lexer *lexer);
void Lexer_MakeItTheNextToken(Lexer *lexer);
void TerminatingMacro(Lexer *lexer);
void NonTerminatingMacro(Lexer *lexer);
int64 _Lexer_MacroChar_NamespaceCheck(Lexer *lexer, byte *nameSpace);
void Lexer_FinishTokenHere(Lexer *lexer);
void SingleEscape(Lexer *lexer);
void _BackSlash(Lexer *lexer, int64 flag);
void BackSlash(Lexer *lexer);
void _MultipleEscape(Lexer *lexer);
void DoubleQuote(Lexer *lexer);
void Minus(Lexer *lexer);
void Plus(Lexer *lexer);
void EndEscapeSequence(Lexer *lexer);
void Escape(Lexer *lexer);
void ForwardSlash(Lexer *lexer);
void Star(Lexer *lexer);
void AddressOf(Lexer *lexer);
void AtFetch(Lexer *lexer);
void Semi(Lexer *lexer);
void GreaterThan(Lexer *lexer);
void Dot(Lexer *lexer);
void Comma(Lexer *lexer);
void CarriageReturn(Lexer *lexer);
void NewLine(Lexer *lexer);
void _EOF(Lexer *lexer);
void _Zero(Lexer *lexer);
int64 Lexer_CheckIfDone(Lexer *lexer, int64 flags);
byte _Lexer_NextChar(ReadLiner *rl);
void Lexer_SetInputFunction(Lexer *lexer, byte (*lipf)(ReadLiner *));
void _Lexer_DoChar(Lexer *lexer, byte c);
Boolean Lexer_IsTokenQualifiedID(Lexer *lexer);
void CFT_LexerTables_Setup(CfrTil *cfrtl);
int64 Lexer_ConvertLineIndexToFileIndex(Lexer *lexer, int64 index);
/* src/basis/core/cstack.c */
int64 _Stack_Overflow(Stack *stack);
int64 _Stack_IsEmpty(Stack *stack);
void _Stack_Push(Stack *stack, int64 value);
void _Stack_Dup(Stack *stack);
int64 _Stack_Pop(Stack *stack);
int64 Stack_Pop_WithExceptionFlag(Stack *stack, int64 exceptionOnEmptyFlag);
int64 Stack_Pop_WithZeroOnEmpty(Stack *stack);
int64 Stack_Pop_WithExceptionOnEmpty(Stack *stack);
int64 Stack_Pop(Stack *stack);
int64 _Stack_PopOrTop(Stack *stack);
void _Stack_DropN(Stack *stack, int64 n);
void _Stack_Drop(Stack *stack);
int64 Stack_Top(Stack *stack);
int64 _Stack_Pick(Stack *stack, int64 offset);
int64 _Stack_PickFromBottom(Stack *stack, int64 offset);
int64 _Stack_Bottom(Stack *stack);
void _Stack_SetBottom(Stack *stack, int64 value);
void _Stack_SetTop(Stack *stack, int64 value);
void Stack_SetTop(Stack *stack, int64 value);
int64 _Stack_N(Stack *stack, int64 n);
int64 _Stack_NOS(Stack *stack);
void Stack_Push(Stack *stack, int64 value);
void Stack_Dup(Stack *stack);
int64 _Stack_IntegrityCheck(Stack *stack);
int64 _Stack_Depth(Stack *stack);
int64 Stack_Depth(Stack *stack);
void _Stack_Init(Stack *stack, int64 slots);
void Stack_Delete(Stack *stack);
void Stack_Init(Stack *stack);
Stack *Stack_New(int64 slots, uint64 allocType);
Stack *Stack_Copy(Stack *stack, uint64 type);
void Stack_Print_AValue(uint64 *stackPointer, int64 i, byte *stackName, byte *buffer, Boolean isWordAlreadyFlag);
void _Stack_PrintHeader(Stack *stack, byte *name);
void _Stack_PrintValues(byte *name, uint64 *stackPointer, int64 depth, Boolean isWordAlreadyFlag);
void _Stack_Print(Stack *stack, byte *name, int64 depth, Boolean isWordAlreadyFlag);
void Stack_Print(Stack *stack, byte *name, Boolean isWordAlreadyFlag);
void _PrintNStackWindow(uint64 *reg, byte *name, byte *regName, int64 size);
void _CFT_PrintNReturnStack(int64 size, Boolean useExistingFlag);
void _CFT_PrintNDataStack(int64 size);
/* src/basis/core/classes.c */
void CFT_ClassStructureEnd(void);
void CFT_CloneStructureBegin(void);
void Class_Size_Set(Namespace *classNs, int64 size);
void _ClassTypedef(Boolean cloneFlag);
void CFT_ClassTypedef(void);
/* src/basis/debugOutput.c */
void Debugger_Menu(Debugger *debugger);
void _Debugger_Locals_ShowALocal(Cpu *cpu, Word *localsWord, Word *scWord);
void _Debugger_Locals_Show_Loop(Cpu *cpu, Stack *stack, Word *scWord);
void Debugger_Locals_Show(Debugger *debugger);
void _Debugger_ShowEffects(Debugger *debugger, Word *word, Boolean stepFlag, Boolean force);
void _Debugger_ShowInfo(Debugger *debugger, byte *prompt, int64 signal, int64 force);
void Debugger_ShowInfo(Debugger *debugger, byte *prompt, int64 signal);
void CFT_ShowInfo(Word *word, byte *prompt, int64 signal);
void Debugger_ShowState(Debugger *debugger, byte *prompt);
void _Debugger_DoNewlinePrompt(Debugger *debugger);
void Debugger_DoState(Debugger *debugger);
void LO_Debug_ExtraShow(int64 showStackFlag, int64 verbosity, int64 wordList, byte *format, ...);
int64 Debugger_TerminalLineWidth(Debugger *debugger);
void Debugger_ShowStackChange(Debugger *debugger, Word *word, byte *insert, byte *achange, Boolean stepFlag);
void Debugger_ShowChange(Debugger *debugger, Word *word, Boolean stepFlag, uint64 *dsp);
byte *String_HighlightTokenInputLine(byte *nvw, int64 lef, int64 leftBorder, int64 ts, byte *token, int64 rightBorder, int64 ref);
byte *PSCS_Using_WordSC(byte *scs, byte *token, int64 scswci);
byte *PSCS_Using_ReadlinerInputString(byte *scs, byte *token, int64 scswci, int64 tvw);
byte *DBG_PrepareSourceCodeString(Word *word, byte *token, byte *scs, int tvw, int rlIndex, Boolean useScFlag);
byte *Debugger_PrepareDbgSourceCodeString(Debugger *debugger, Word *word, byte *token, int64 twAlreayUsed);
void Debugger_ShowInfo_Token(Debugger *debugger, Word *word, byte *prompt, int64 signal, byte *token0, byte *location, byte *signalAscii);
/* src/basis/core/namespace.c */
void _Namespace_DoAddSymbol(Namespace *ns, Symbol *symbol);
void Namespace_DoAddSymbol(Namespace *ns, Symbol *symbol);
void _Namespace_DoAddWord(Namespace *ns, Word *word, int64 addFlag);
void Namespace_DoAddWord(Namespace *ns, Word *word);
void _Namespace_AddToNamespacesHead(Namespace *ns);
void _Namespace_AddToNamespacesTail(Namespace *ns);
void Namespace_DoNamespace(Namespace *ns, Boolean isForwardDotted);
void _CFT_SetAsInNamespace(Namespace *ns);
void _Namespace_AddToNamespacesHead_SetAsInNamespace(Namespace *ns);
Namespace *_CFT_Namespace_InNamespaceSet(Namespace *ns);
Namespace *CFT_Namespace_InNamespaceSet(byte *name);
Namespace *_CFT_Namespace_InNamespaceGet(void);
Namespace *_CFT_InNamespace(void);
Boolean _CFT_IsContainingNamespace(byte *name, byte *namespaceName);
void _Namespace_DoNamespace(Namespace *ns);
void Namespace_DoNamespace_Name(byte *name);
Boolean _Namespace_IsUsing(Namespace *ns);
Boolean Namespace_IsUsing(byte *name);
void _Namespace_SetState(Namespace *ns, uint64 state);
Word *_Namespace_FirstOnUsingList(void);
void _Namespace_ResetFromInNamespace(Namespace *ns);
void _Namespace_AddToNamespacesTail_ResetFromInNamespace(Namespace *ns);
void Namespaces_PrintList(Namespace *ns, byte *insert);
void Namespace_SetState_AdjustListPosition(Namespace *ns, uint64 state, Boolean setInNsFlag);
void _Namespace_AddToUsingList(Namespace *ns);
void _Namespace_ActivateAsPrimary(Namespace *ns);
void Namespace_ActivateAsPrimary(byte *name);
void Namespace_MoveToTail(byte *name);
void _Namespace_SetAsNotUsing(Namespace *ns);
void _Namespace_SetStateAs_NotUsing(Namespace *ns);
void _Namespace_SetState_AsUsing(Namespace *ns);
void Namespace_SetAsNotUsing(byte *name);
void _Namespace_SetAsNotUsing_MoveToTail(Namespace *ns);
void Namespace_SetAsNotUsing_MoveToTail(byte *name);
void _Namespace_SetAs_UsingLast(byte *name);
void _RemoveSubNamespacesFromUsingList(Symbol *symbol, Namespace *ns);
void _Namespace_RemoveFromUsingList(Namespace *ns);
void Namespace_RemoveFromUsingList(byte *name);
void Namespace_MoveToFirstOnUsingList(byte *name);
void Namespace_RemoveFromUsingList_WithCheck(byte *name);
void _Namespace_Clear(Namespace *ns);
void Namespace_Clear(byte *name);
void _Namespace_RemoveFromUsingListAndClear(Namespace *ns);
int64 _Namespace_VariableValueGet(Namespace *ns, byte *name);
void _Namespace_VariableValueSet(Namespace *ns, byte *name, int64 value);
Namespace *Namespace_New(byte *name, Namespace *containingNs);
Namespace *_Namespace_Find(byte *name, Namespace *superNamespace, int64 exceptionFlag);
Namespace *Namespace_Find(byte *name);
Namespace *Namespace_FindOrNew_SetUsing(byte *name, Namespace *containingNs, int64 setUsingFlag);
Namespace *_Namespace_FindOrNew_Local(Stack *nsStack);
Namespace *Namespace_FindOrNew_Local(Stack *nsStack, Boolean setBlockFlag);
void Symbol_NamespacePrettyPrint(Symbol *symbol, int64 indentFlag, int64 indentLevel);
void _Namespace_PrintWords(Namespace *ns);
void Namespace_PrintWords(byte *name);
void _Namespace_MapAny_2Args(MapSymbolFunction2 msf2, int64 one, int64 two);
void _Namespace_MapUsing_2Args(MapSymbolFunction2 msf2, int64 one, int64 two);
void CFT_SetInNamespaceFromBackground(void);
/* src/basis/history.c */
HistoryStringNode *HistoryStringNode_New(byte *hstring);
HistoryStringNode *HistorySymbolList_Find(byte *hstring);
void ReadLine_ShowHistoryNode(ReadLiner *rl);
void _OpenVmTil_AddStringToHistoryList(byte *istring);
void OpenVmTil_AddStringToHistory(void);
void OpenVmTil_AddStringToHistoryOn(void);
void OpenVmTil_AddStringToHistoryOff(void);
void HistorySpace_Delete(void);
void _HistorySpace_Init(OpenVmTil *ovt, int64 reset);
void _HistorySpace_New(OpenVmTil *ovt, int64 resetFlag);
void HistorySpace_Reset(void);
/* src/basis/core/readline.c */
void _ReadLine_NullDelimitInputBuffer(ReadLiner *rl);
void _ReadLine_QuickAppendCharacter(ReadLiner *rl, byte chr);
void _ReadLine_SetOutputLineCharacterNumber(ReadLiner *rl);
void __ReadLine_AppendCharacter(ReadLiner *rl, byte chr);
void __ReadLine_AppendCharacter_Actual(ReadLiner *rl, byte chr);
void _ReadLine_AppendCharacter(ReadLiner *rl);
void _ReadLine_AppendCharacter_Actual(ReadLiner *rl);
void ReadLine_DoCursorMoveInput(ReadLiner *rl, int64 newCursorPosition);
void ReadLine_SetCursorPosition(ReadLiner *rl, int64 pos);
void ReadLiner_CommentToEndOfLine(ReadLiner *rl);
int64 ReadLiner_PeekSkipSpaces(ReadLiner *rl);
void ReadLiner_Done(ReadLiner *rl);
Boolean ReadLiner_IsDone(ReadLiner *rl);
void _ReadLine_MoveInputStartToLineStart(int64 fromPosition, int64 lineUpFlag);
void _ReadLine_PrintfClearTerminalLine(void);
void ReadLine_ClearCurrentTerminalLine(ReadLiner *rl, int64 fromPosition);
void ReadLine_SetInputLine(ReadLiner *rl, byte *buffer);
void ReadLine_InputLine_Clear(ReadLiner *rl);
void ReadLine_InputLine_Init(ReadLiner *rl);
void ReadLine_RunInit(ReadLiner *rl);
void ReadLine_Init(ReadLiner *rl, ReadLiner_KeyFunction ipf);
ReadLiner *ReadLine_New(uint64 type);
void _ReadLine_Copy(ReadLiner *rl, ReadLiner *rl0, uint64 type);
ReadLiner *ReadLine_Copy(ReadLiner *rl0, uint64 type);
void ReadLine_TabWordCompletion(ReadLiner *rl);
void __ReadLine_AppendCharacterAndCursoRight(ReadLiner *rl, byte c);
void _ReadLine_AppendCharacterAndCursoRight(ReadLiner *rl);
void _ReadLine_AppendAndShowCharacter(ReadLiner *rl, byte c);
void ReadLine_AppendAndShowCharacter(ReadLiner *rl);
byte *ReadLine_GetPrompt(ReadLiner *rl);
void ReadLine_SetPrompt(ReadLiner *rl, byte *newPrompt);
byte *ReadLine_GetAltPrompt(ReadLiner *rl);
byte *ReadLine_GetNormalPrompt(ReadLiner *rl);
void _ReadLine_Show(ReadLiner *rl, byte *prompt);
void _ReadLine_ShowLine(ReadLiner *rl, byte *prompt);
void ReadLine_ShowLine(ReadLiner *rl);
void _ReadLine_ClearAndShowLine(ReadLiner *rl, byte *prompt);
void __ReadLine_DoStringInput(ReadLiner *rl, byte *string, byte *prompt);
void ReadLine_ClearAndShowLine(ReadLiner *rl);
void _ReadLine_ShowCursor(ReadLiner *rl, byte *prompt);
void ReadLine_ShowCursor(ReadLiner *rl);
void _ReadLine_DoStringInput(ReadLiner *rl, byte *string, byte *prompt);
void ReadLine_ShowStringWithCursor(ReadLiner *rl, byte *string);
void ReadLine_ClearAndShowLineWithCursor(ReadLiner *rl);
void ReadLine_ShowNormalPrompt(ReadLiner *rl);
void ReadLine_InsertCharacter(ReadLiner *rl);
void ReadLine_SaveCharacter(ReadLiner *rl);
void _ReadLine_InsertStringIntoInputLineSlotAndShow(ReadLiner *rl, int64 startOfSlot, int64 endOfSlot, byte *data);
void ReadLiner_InsertTextMacro(ReadLiner *rl, Word *word);
void ReadLine_DeleteChar(ReadLiner *rl);
int64 ReadLine_IsLastCharADot(ReadLiner *rl, int64 pos);
int64 ReadLine_FirstCharOfToken_FromLastChar(ReadLiner *rl, int64 pos);
int64 ReadLine_IsThereADotSeparator(ReadLiner *rl, int64 pos);
int64 ReadLine_LastCharOfLastToken_FromPos(ReadLiner *rl, int64 pos);
int64 ReadLine_EndOfLastToken(ReadLiner *rl);
int64 ReadLine_BeginningOfLastToken(ReadLiner *rl);
Boolean ReadLine_IsReverseTokenQualifiedID(ReadLiner *rl);
void Readline_Setup_OneStringInterpret(ReadLiner *rl, byte *str);
void Readline_SaveInputLine(ReadLiner *rl);
void Readline_RestoreInputLine(ReadLiner *rl);
Boolean _Readline_CheckArrayDimensionForVariables(ReadLiner *rl);
Boolean _Readline_Is_AtEndOfBlock(ReadLiner *rl0);
byte ReadLine_Set_Key(ReadLiner *rl, byte c);
byte ReadLine_Get_Key(ReadLiner *rl);
byte ReadLine_GetNextCharFromString(ReadLiner *rl);
void ReadLine_SetRawInputFunction(ReadLiner *rl, ReadLiner_KeyFunction ripf);
void ReadLine_ReadFileIntoAString(ReadLiner *rl, FILE *file);
void ReadLine_SetInputString(ReadLiner *rl, byte *string);
void _ReadLine_TabCompletion_Check(ReadLiner *rl);
byte _ReadLine_GetLine(ReadLiner *rl, byte c);
byte ReadLine_GetLine(ReadLiner *rl);
byte ReadLine_NextChar(ReadLiner *rl);
byte ReadLine_NextNonPunctCharAfterEndOfString(ReadLiner *rl);
Boolean ReadLine_AreWeAtNewlineAfterSpaces(ReadLiner *rl);
Boolean ReadLine_CheckForLocalVariables(ReadLiner *rl);
/* src/basis/core/dataStack.c */
uint64 DataStack_Pop(void);
void DataStack_Push(int64 value);
void DataStack_Dup(void);
void DataStack_DropN(int64 n);
void DataStack_Drop(void);
int64 DataStack_Overflow(void);
int64 DataStack_Underflow(void);
void DataStack_Check(void);
int64 DataStack_Depth(void);
void _CFT_PrintDataStack(void);
void CFT_PrintDataStack(void);
void CFT_PrintStackDepth(void);
void Set_DebuggerDspReg_FromDspReg(void);
void Set_DspReg(uint64 *ptr);
void Set_DspReg_FromDebuggerDspReg(void);
void _Set_DataStackPointers(uint64 *ptr);
void Set_DataStackPointers_FromDebuggerDspReg(void);
void Set_DataStackPointer_FromDspReg(void);
void Set_DspReg_FromDataStackPointer(void);
void CFT_CheckInitDataStack(void);
void CFT_DataStack_Size(void);
/* src/basis/context.c */
void _Context_Prompt(int64 control);
byte *_Context_Location(Context *cntx);
byte *Context_Location(void);
Word *_Context_CurrentWord(Context *cntx);
Word *Context_CurrentWord(void);
Context *_Context_Allocate(void);
void Context_SetDefaultTokenDelimiters(Context *cntx, byte *delimiters, uint64 allocType);
Context *_Context_Init(Context *cntx0, Context *cntx);
Context *_Context_New(CfrTil *cfrTil);
void _Context_Run_1(Context *cntx, ContextFunction_1 contextFunction, byte *arg);
void _Context_Run_2(Context *cntx, ContextFunction_2 contextFunction, byte *arg, int64 arg2);
void _Context_Run(Context *cntx, ContextFunction contextFunction);
Context *CFT_Context_PushNew(CfrTil *cfrTil);
void CFT_Context_PopDelete(CfrTil *cfrTil);
void _CFT_Contex_NewRun_1(CfrTil *cfrTil, ContextFunction_1 contextFunction, byte *arg);
void _CFT_Contex_NewRun_2(CfrTil *cfrTil, ContextFunction_2 contextFunction, byte *arg, int64 arg2);
void _CFT_Contex_NewRun_Void(CfrTil *cfrTil, Word *word);
void _Context_InterpretString(Context *cntx, byte *str);
void _CFT_ContextNew_InterpretString(CfrTil *cfrTil, byte *str);
void _Context_InterpretFile(Context *cntx);
void _Context_IncludeFile(Context *cntx, byte *filename, int64 interpretFlag);
void _CFT_ContextNew_IncludeFile(byte *filename);
int64 _Context_StringEqual_PeekNextToken(Context *cntx, byte *check, Boolean evalFlag);
void Context_Interpret(Context *cntx);
byte *Context_IsInFile(Context *cntx);
/* src/basis/core/word.c */
void Word_Run(Word *word);
void Word_Eval(Word *word);
void _Word_Interpret(Word *word);
void _Word_Compile(Word *word);
Namespace *_Word_Namespace(Word *word);
void _Word_Copy(Word *word, Word *word0);
Word *Word_Copy(Word *word0, uint64 allocType);
void _Word_Finish(Word *word);
void _Word_DefinitionStore(Word *word, block code);
void Word_InitFinal(Word *word, byte *code);
void _Word_Add(Word *word, int64 addToInNs, Namespace *addToNs);
Word *_Word_Allocate(uint64 allocType);
Word *_Word_Create(byte *name, uint64 morphismType, uint64 objectType, uint64 lispType, uint64 allocType);
void Word_SetLocation(Word *word);
Word *_Word_New(byte *name, uint64 morphismType, uint64 objectType, uint64 lispType, Boolean addToInNs, Namespace *addToNs, uint64 allocType);
Word *Word_New(byte *name);
void Word_PrintOffset(Word *word, int64 offset, int64 totalOffset);
byte *_Word_SourceCodeLocation_pbyte(Word *word);
void Word_PrintName(Word *word);
byte *Word_Info(Word *word);
void Word_Print(Word *word);
void _Word_Print(Word *word);
void Word_N_M_Node_Print(dlnode *node);
void _Word_ShowSourceCode(Word *word0);
byte *Word_GetLocalsSourceCodeString(Word *word, byte *buffer);
void Word_ShowSourceCode(Word *word);
Word *Word_GetFromCodeAddress(byte *address);
Word *Word_GetFromCodeAddress_NoAlias(byte *address);
void _CFT_WordName_Run(byte *name);
Word *_CFT_TypedefAlias(Word *word, byte *name, Namespace *addToNs);
Word *_CFT_Alias(Word *word, byte *name, Namespace *addToNs);
void Do_TextMacro(void);
void Do_StringMacro(void);
void _CFT_Macro(int64 mtype, byte *function);
Word *Word_GetOriginalWord(Word *word);
Word *Word_UnAlias(Word *word);
/* src/basis/core/readTable.c */
void CFT_ReadTables_Setup(CfrTil *cfrl);
void ReadTable_Default(ReadLiner *rl);
void ReadTable_LParen(ReadLiner *rl);
void ReadTable_Tab(ReadLiner *rl);
void ReadTable_0x03(ReadLiner *rl);
void ReadTable_0x04(ReadLiner *rl);
void ReadTable_CarriageReturn(ReadLiner *rl);
void ReadTable_Newline(ReadLiner *rl);
void ReadTable_Zero(ReadLiner *rl);
void ReadTable_EOF(ReadLiner *rl);
void ReadTable_ESC(ReadLiner *rl);
void ReadTable_LeftBracket(ReadLiner *rl);
void ReadTable_A(ReadLiner *rl);
void ReadTable_B(ReadLiner *rl);
void ReadTable_C(ReadLiner *rl);
void ReadTable_D(ReadLiner *rl);
void ReadTable_F(ReadLiner *rl);
void ReadTable_H(ReadLiner *rl);
void ReadTable_4(ReadLiner *rl);
void ReadTable_3(ReadLiner *rl);
void ReadTable_1(ReadLiner *rl);
void ReadTable_O(ReadLiner *rl);
void ReadTable_Tilde(ReadLiner *rl);
void ReadTable_BackSpace(ReadLiner *rl);
/* src/basis/bigNum.c */
mpfr_t *_BigNum_New(byte *token);
void BigNum_GetPrintfPrecision_BigNum(void);
void BigNum_GetPrintfWidth(void);
void BigNum_GetAndPrint_BitPrecision(void);
void BigNum_Set_PrintfWidth(void);
void BN_SetDefaultBitPrecision(long precision);
void _BigNum_SetDefaultBitPrecision(mpfr_t *prec);
void BigNum_Set_PrintfPrecision(void);
void BigNum_StateShow(void);
void BigNum_Init(void);
void BigNum_Info(void);
void _BigNum_FPrint(mpfr_t *value);
void BigNum_FPrint(void);
void BigNum_EPrint(void);
void BigNum_PopTwoOperands_PushFunctionResult(mpf2andOutFunc func);
void BigNum_Add(void);
void BigNum_Multiply(void);
void BigNum_Divide(void);
void BigNum_Subtract(void);
void _BigNum_OpEqualTemplate(mpf2andOutFunc func);
void BigNum_PlusEqual(void);
void BigNum_MinusEqual(void);
void BigNum_MultiplyEqual(void);
void BigNum_DivideEqual(void);
void BigNum_PlusPlus(void);
void BigNum_MinusMinus(void);
void BigNum_SquareRoot(void);
void BigNum_Power(void);
int64 BigNum_Cmp(void);
void BigNum_Equal(void);
void BigNum_LessThan(void);
void BigNum_LessThanOrEqual(void);
void BigNum_GreaterThan(void);
void BigNum_GreaterThanOrEqual(void);
void BigNum_LogicalEquals(void);
void BigNum_LogicalDoesNotEqual(void);
/* src/basis/core/_readline.c */
void ReadLine_Set_ReadIndex(ReadLiner *rl, int64 pos);
byte *_ReadLine_pb_NextChar(ReadLiner *rl);
byte _ReadLine_NextChar(ReadLiner *rl);
byte _ReadLine_PeekIndexedChar(ReadLiner *rl, int64 offset);
byte ReadLine_PeekIndexedChar(ReadLiner *rl, int64 index);
byte _ReadLine_PeekOffsetChar(ReadLiner *rl, int64 offset);
byte ReadLine_PeekNextChar(ReadLiner *rl);
byte _ReadLine_GetNextChar(ReadLiner *rl);
void _ReadLine_EndThisLine(ReadLiner *rl);
byte ReadLine_CurrentReadChar(ReadLiner *rl);
byte *ReadLine_BytePointerToCurrentReadChar(ReadLiner *rl);
byte ReadLine_LastChar(ReadLiner *rl);
byte ReadLine_LastReadChar(ReadLiner *rl);
byte ReadLine_PeekNextNonWhitespaceChar(ReadLiner *rl);
int64 ReadLine_IsThereNextChar(ReadLiner *rl);
void ReadLine_UnGetChar(ReadLiner *rl);
void ReadLine_PushChar(ReadLiner *rl, byte c);
void _ReadLine_ShowCharacter(ReadLiner *rl, byte chr);
void ReadLine_ShowCharacter(ReadLiner *rl);
void _ReadLine_SetMaxEndPosition(ReadLiner *rl);
void _ReadLine_SetEndPosition(ReadLiner *rl);
byte _ReadLine_CharAtCursor(ReadLiner *rl);
byte _ReadLine_CharAtACursorPos(ReadLiner *rl, int64 pos);
void _ReadLine_CursorToEnd(ReadLiner *rl);
void _ReadLine_CursorToStart(ReadLiner *rl);
void _ReadLine_CursorRight(ReadLiner *rl);
void _ReadLine_CursorLeft(ReadLiner *rl);
/* src/basis/core/array.c */
void _ByteArray_UnAppendSpace(ByteArray *ba, int64 size);
void _ByteArray_DataClear(ByteArray *ba);
void _ByteArray_Init(ByteArray *ba);
int64 ByteArray_IsAddressWwitinTheArray(ByteArray *ba, byte *address);
ByteArray *ByteArray_Init(ByteArray *ba, int64 size, uint64 type);
ByteArray *ByteArray_AllocateNew(int64 size, uint64 type);
byte *_ByteArray_GetEndIndex(ByteArray *ba);
byte *_ByteArray_Here(ByteArray *ba);
void _ByteArray_SetEndIndex(ByteArray *ba, byte *index);
void _ByteArray_SetHere(ByteArray *ba, byte *index);
void _SetPreHere_ForDebug(byte *address);
void SetPreHere_ForDebug(byte *address);
void ByteArray_SetHere_AndForDebug(ByteArray *ba, byte *address, Boolean forDebugFlag);
void SetHere(byte *address, Boolean setForDebugFlag);
byte *_ByteArray_GetStartIndex(ByteArray *ba);
void _ByteArray_SetStartIndex(ByteArray *ba, byte *address);
void ByteArray_AppendCopyInteger(ByteArray *ba, int64 size, int64 data);
void ByteArray_AppendCopy(ByteArray *ba, int64 size, byte *data);
void ByteArray_AppendCopyUpToRET(ByteArray *ba, byte *data);
void _NBA_SetCompilingSpace_MakeSureOfRoom(NamedByteArray *nba, int64 room);
ByteArray *_NamedByteArray_AddNewByteArray(NamedByteArray *nba, int64 size);
NamedByteArray *_NamedByteArray_Allocate(int64 allocType);
NamedByteArray *NamedByteArray_Allocate(void);
void _NamedByteArray_Init(NamedByteArray *nba, byte *name, int64 size, int64 atype);
NamedByteArray *NamedByteArray_New(byte *name, int64 size, int64 atype);
int64 NamedByteArray_CheckAddress(NamedByteArray *nba, byte *address);
/* src/basis/core/compiler.c */
Word *_CopyDuplicateWord(Word *word0, Boolean complete);
Word *CopyDuplicateWord(dlnode *anode, Word *word0);
Word *_CFT_CopyDuplicates(Word *word0);
Word *Compiler_CopyDuplicatesAndPush(Word *word0, int64 tsrli, int64 scwi);
void Compiler_IncrementCurrentAccumulatedOffset(Compiler *compiler, int64 increment);
void Compiler_SetCurrentAccumulatedOffsetValue(Compiler *compiler, int64 value);
NamedByteArray *_Compiler_SetCompilingSpace(byte *name);
byte *_Compiler_GetCodeSpaceHere(void);
void Compiler_SetCompilingSpace(byte *name);
void _Compiler_SetCompilingSpace_MakeSureOfRoom(byte *name, int64 room);
void Compiler_SetCompilingSpace_MakeSureOfRoom(byte *name);
Word *Compiler_PreviousNonDebugWord(int64 startIndex);
void GotoInfo_Print(dlnode *node);
void Compiler_GotoList_Print(void);
Word *_CFT_WordList(int64 n);
Word *CFT_WordList(int64 n);
void _CompileOptimizeInfo_Init(CompileOptimizeInfo *optInfo);
void CompileOptimizeInfo_Init(CompileOptimizeInfo *optInfo, uint64 state);
CompileOptimizeInfo *_CompileOptimizeInfo_New(uint64 type);
CompileOptimizeInfo *CompileOptimizeInfo_New(uint64 type);
CompileOptimizeInfo *Compiler_CompileOptimizeInfo_PushNew(Compiler *compiler);
CompileOptimizeInfo *Compiler_CompileOptimizeInfo_New(Compiler *compiler, uint64 type);
CompileOptimizeInfo *CompileOptInfo_NewCopy(CompileOptimizeInfo *optInfo, uint64 type);
int64 Compiler_BlockLevel(Compiler *compiler);
void Compiler_Init_AccumulatedOffsetPointers(Compiler *compiler, Word *word);
void CFT_SaveDebugInfo(Word *word, uint64 allocType);
void Compiler_FreeLocalsNamespaces(Compiler *compiler);
void CFT_DeleteDebugInfo(void);
void _CFT_FinishWordDebugInfo(Word *word);
void Compiler_Init(Compiler *compiler, uint64 state);
Compiler *Compiler_New(uint64 allocType);
Compiler *Compiler_Copy(Compiler *compiler, uint64 allocType);
void Compiler_CalculateAndSetPreviousJmpOffset(Compiler *compiler, byte *jmpToAddress);
void CFT_CalculateAndSetPreviousJmpOffset_ToHere(void);
void _Stack_PointerToJmpOffset_Set(byte *address);
void Stack_Push_PointerToJmpOffset(byte *compiledAtAddress);
void CFT_CompileAndRecord_Word0_PushReg(Boolean reg, Boolean recordFlag);
void CFT_CompileAndRecord_Word0_PushRegToUse(void);
void CFT_CompileAndRecord_PushAccum(void);
/* src/basis/core/dllnodes.c */
/* src/basis/core/finder.c */
Symbol *DLList_FindName_InOneNamespaceList(dllist *list, byte *name);
Symbol *DLList_FindName_InOneNamespace(Namespace *ns, byte *name);
Symbol *_Finder_CompareDefinitionAddress(Symbol *symbol, byte *address);
Symbol *_Finder_CompareDefinitionAddress_NoAlias(Symbol *symbol, byte *address);
Word *Finder_FindWordFromAddress_InOneNamespace(Finder *finder, Namespace *ns, byte *address);
Word *Finder_FindWordFromAddress_AnyNamespace(Finder *finder, byte *address);
Word *Finder_FindWordFromAddress_AnyNamespace_NoAlias(Finder *finder, byte *address);
void Finder_SetQualifyingNamespace(Finder *finder, Namespace *ns);
void Finder_SetNamedQualifyingNamespace(Finder *finder, byte *name);
Namespace *Finder_GetQualifyingNamespace(Finder *finder);
Word *_Finder_Word_Find(Finder *finder, uint64 state, byte *name);
Word *_Finder_FindWord_InOneNamespace(Finder *finder, Namespace *ns, byte *name);
Word *Finder_Word_Find(Finder *finder, byte *name, int64 flag, int64 saveQns);
Word *Finder_Word_FindUsing(Finder *finder, byte *name, int64 saveQns);
Word *Finder_Word_FindAny(Finder *finder, byte *name, int64 saveQns);
Word *Finder_FindQualifiedIDWord(Finder *finder, byte *token);
byte *Finder_GetTokenDefinitionAddress(Finder *finder, byte *token);
Word *Finder_FindToken_WithException(Finder *finder, byte *token);
Word *Finder_FindToken(Finder *finder, byte *token);
Word *Finder_FindWord_UsedNamespaces(Finder *finder, byte *name);
Word *Finder_FindWord_AnyNamespace(Finder *finder, byte *name);
Word *CFT_FindInAnyNamespace(byte *name);
Word *Finder_FindWord_InOneNamespace(Finder *finder, byte *nsName, byte *name);
void CFT_Find(void);
void CFT_Postfix_Find(void);
void CFT_Postfix_FindAny(void);
void CFT_UnsetQualifyingNamespace(void);
void Finder_Init(Finder *finder);
Finder *Finder_New(uint64 allocationType);
/* src/basis/interpreters.c */
void Interpret_String(byte *str);
byte *Interpret_C_Until_Token4(Interpreter *interp, byte *end1, byte *end2, byte *end3, byte *end4, byte *delimiters, Boolean newlineBreakFlag);
void _Interpret_Until_Token(Interpreter *interp, byte *end, byte *delimiters);
byte *Interpret_Until_Token(Interpreter *interp, byte *end, byte *delimiters);
void Interpret_PrefixFunction_Until_Token(Interpreter *interp, Word *prefixFunction, byte *end, byte *delimiters);
void Interpret_PrefixFunction_OrUntil_RParen(Interpreter *interp, Word *prefixFunction);
void Interpret_UntilFlagged(Interpreter *interp, int64 doneFlags);
void Interpret_ToEndOfLine(Interpreter *interp);
void Interpret_UntilFlaggedWithInit(Interpreter *interp, int64 doneFlags);
void _CFT_Interpret(CfrTil *cfrTil);
void CFT_InterpreterRun(void);
/* src/basis/tabCompletion.c */
void RL_TabCompletion_Run(ReadLiner *rl, Word *rword);
TabCompletionInfo *TabCompletionInfo_New(uint64 allocType);
byte *ReadLiner_GenerateFullNamespaceQualifiedName(ReadLiner *rl, Word *w);
int64 _TC_FindPrevious_NamespaceQualifiedIdentifierStart(TabCompletionInfo *tci, byte *s, int64 pos);
void RL_TC_StringInsert_AtCursor(ReadLiner *rl, byte *strToInsert);
byte *_TabCompletionInfo_GetAPreviousIdentifier(ReadLiner *rl, int64 start);
void RL_TabCompletionInfo_Init(ReadLiner *rl);
Word *_TabCompletion_Compare(Word *word);
Word *TC_Tree_Map(TabCompletionInfo *tci, MapFunction mf, Word *wordi);
/* src/basis/colors.c */
void _OpenVmTil_ColorsInit(OpenVmTil *ovt);
void Console(void);
void _ShowRGB(int64 fr, int64 fg, int64 fb, int64 br, int64 bg, int64 bb);
void _String_ShowRGB(byte *buf, int64 fr, int64 fg, int64 fb, int64 br, int64 bg, int64 bb);
void _ShowRgbColors(Colors *c);
void _String_ShowRgbColors(byte *buf, Colors *c);
void Colors_Init6(Colors *c, int64 fr, int64 fg, int64 fb, int64 br, int64 bg, int64 bb);
void ShowColors(Colors *c);
void String_ShowColors(byte *buf, Colors *c);
void _Colors_Init2(Colors *c, int64 fg, int64 bg);
void _CFT_SetRGBColor(Colors *c);
void _CFT_SetColors(Colors *c);
void Ovt_UserColors(void);
void Ovt_AlertColors(void);
void Ovt_DefaultColors(void);
void Ovt_DebugColors(void);
void Ovt_NoticeColors(void);
void CFT_SetDefaultColors(void);
void CFT_SetAlertColors(void);
void CFT_SetDebugColors(void);
void CFT_SetUserColors(void);
void CFT_SetNoticeColors(void);
void CFT_SetDefaultRGB(void);
void CFT_SetUserRGB(void);
void CFT_SetAlertRGB(void);
void CFT_SetDebugRGB(void);
void CFT_SetNoticeRGB(void);
/* src/basis/sourceCode.c */
void SC_ShowDbgSourceCodeWord_Or_AtAddress(Word *scWord0, byte *address);
Boolean SC_ShowSourceCode_In_Word_At_Address(Word *word, byte *address);
Boolean SC_IsWord_BlockOrCombinator(Word *word);
Boolean SC_IsWord_MatchCorrectConsideringBlockOrCombinator(Word *word);
Word *DWL_Find(dllist *list, Word *iword, byte *address, byte *name, int64 takeFirstFind, byte *newAddress, int64 fromFirstFlag);
Boolean SC_List_AdjustAddress(dlnode *node, byte *address, byte *newAddress);
void CFT_AdjustDbgSourceCodeAddress(byte *address, byte *newAddress);
void CheckRecycleWord(Node *node);
void DLList_Recycle_WordList(dllist *list);
void DLList_RecycleInit_WordList(Word *word);
void _CFT_RecycleInit_Compiler_N_M_Node_WordList(void);
void CFT_WordList_Init(Word *word);
void Word_SetSourceCoding(Word *word, byte *address);
void Word_SetCoding(Word *word, byte *address);
void WordList_SetSourceCoding(int64 index, byte *address);
void Word_SetCodingAndSourceCoding(Word *word, byte *address);
void WordList_SetCoding(int64 index, byte *address);
void SC_ListClearAddress(dlnode *node, byte *address);
void Compiler_Word_SetCoding_And_ClearPreviousUseOf_A_SCA(Word *word, byte *coding, Boolean clearPreviousFlag);
void Compiler_SCA_Word_SetCodingHere_And_ClearPreviousUse(Word *word, Boolean clearPreviousFlag);
Word *_CFT_WordList_TopWord(void);
Word *_CFT_WordList_PopWords(int64 n);
Word *CFT_WordLists_PopWord(void);
void CFT_WordList_Push(Word *word, Boolean inUseFlag);
void _CFT_WordList_PushWord(Word *word, int64 inUseFlag);
void CFT_WordList_PushWord(Word *word);
void _DWL_ShowWord_Print(Word *word, int64 index, byte *prefix, byte *coding, byte *sourceCoding, byte *newSourceCoding, int64 scwi, Boolean iuFlag);
void DWL_ShowWord(dlnode *anode, int64 index, int64 inUseOnlyFlag, int64 prefix, int64 scwiDiff);
void SC_WordList_Show(dllist *list, Word *scWord, Boolean fromFirstFlag, Boolean inUseOnlyFlag, byte *listName);
void CFT_WordList_Show(Word *word, byte *prefix, Boolean inUseOnlyFlag, Boolean showInDebugColors);
void _CFT_SC_WordList_Show(byte *prefix, Boolean inUseOnlyFlag, Boolean showInDebugColors);
void CFT_SC_WordList_Show(void);
void CFT_DbgSourceCodeOff(void);
void CFT_DbgSourceCodeOn(void);
void CFT_DbgSourceCodeOn_Global(void);
void CFT_DbgSourceCodeOff_Global(void);
void _CFT_AddStringToSourceCode(CfrTil *cfrtil, byte *str);
void CFT_AddStringToSourceCode(CfrTil *cfrtil, byte *str);
void _CFT_SC_ScratchPadIndex_Init(CfrTil *cfrtil);
void _CFT_SourceCode_Init(CfrTil *cfrtil);
void CFT_SourceCode_InitStart(CfrTil *cfrtil);
void _CFT_InitSourceCode(CfrTil *cfrtil);
void CFT_InitSourceCode(CfrTil *cfrtil);
void CFT_InitSourceCode_WithName(CfrTil *cfrtil, byte *name, Boolean force);
void CFT_InitSourceCode_WithCurrentInputChar(CfrTil *cfrtil, Boolean force);
void CFT_SourceCode_Init(void);
void CFT_Lexer_SourceCodeOn(void);
byte *_CFT_GetSourceCode(void);
void _CFT_SetSourceCodeWord(Word *word);
void CFT_SetSourceCodeWord(void);
void CFT_Finish_WordSourceCode(CfrTil *cfrtil, Word *word);
void SCN_Set_NotInUse(dlnode *node);
void SCN_Set_NotInUseForOptimization(dlnode *node);
void _CFT_UnAppendFromSourceCode_NChars(CfrTil *cfrtil, int64 nchars);
void _CFT_UnAppendTokenFromSourceCode(CfrTil *cfrtil, byte *tkn);
void _CFT_AppendCharToSourceCode(CfrTil *cfrtil, byte c);
void CFT_AppendCharToSourceCode(CfrTil *cfrtil, byte c);
Word *Get_SourceCodeWord(void);
/* src/basis/debugStepping.c */
void _Debugger_StepOneInstruction(Debugger *debugger);
byte *Debugger_CompileOneInstruction(Debugger *debugger, byte *jcAddress, Boolean showFlag);
void _Debugger_CompileAndStepOneInstruction(Debugger *debugger, byte *jcAddress);
byte *_Debugger_CompileOneInstruction(Debugger *debugger, byte *jcAddress);
void Debugger_CompileAndStepOneInstruction(Debugger *debugger);
void Debugger_PreStartStepping(Debugger *debugger);
void Debugger_Step(Debugger *debugger);
void Debugger_AfterStep(Debugger *debugger);
void _Debugger_SetupStepping(Debugger *debugger, Word *word, byte *address, byte *name);
void Debugger_SetupStepping(Debugger *debugger);
int64 _Debugger_SetupReturnStackCopy(Debugger *debugger, int64 size, Boolean showFlag);
void Debugger_PrintReturnStackWindow(void);
void Debugger_SetupReturnStackCopy(Debugger *debugger, int64 showFlag);
void _Compile_Restore_Debugger_CpuState(Debugger *debugger, int64 showFlag);
void _Compile_Restore_C_CpuState(CfrTil *cfrtil, int64 showFlag);
void _Compile_Save_C_CpuState(CfrTil *cfrtil, int64 showFlag);
void _Compile_Save_Debugger_CpuState(Debugger *debugger, int64 showFlag);
void Debugger_Stepping_Off(Debugger *debugger);
Word *Debugger_GetWordFromAddress(Debugger *debugger);
byte *Debugger_DoJcc(Debugger *debugger, int64 numOfBytes);
int64 Debugger_CanWeStep(Debugger *debugger, Word *word);
void Debug_ExtraShow(int64 size, Boolean force);
byte *_Debugger_COI_Do_Insn_Default(Debugger *debugger, int64 size);
byte *_Debugger_COI_StepInto(Debugger *debugger, Word *word, byte *jcAddress, int64 size);
byte *_Debugger_COI_StepThru(Debugger *debugger, byte *jcAddress, int64 size);
void Debugger_CASOI_Do_Return_Insn(Debugger *debugger);
Boolean _Debugger_CASOI_Do_JmpOrCall_Insn(Debugger *debugger, byte *jcAddress);
void Debugger_CASOI_Do_JmpOrCall_Insn(Debugger *debugger, byte *jcAddress);
void Debugger_CASOI_Do_Jcc_Insn(Debugger *debugger, byte *jcAddress);
byte *Debugger_CASOI_Do_IncDec_Insn(Debugger *debugger, byte *jcAddress);
void Debugger_CASOI_Do_Test_Insn(Debugger *debugger, byte *jcAddress);
void Debugger_CASOI_UpdateInfo(Debugger *debugger);
/* src/basis/core/string.c */
Boolean IsChar_Dot(byte character);
Boolean IsChar_Whitespace(byte character);
Boolean IsChar_DelimiterOrDot(byte character);
Boolean IsChar_ADotAndNotANonDelimiter(byte character);
void Mem_Clear(byte *buffer, int64 size);
int64 String_IsPreviousCharA_(byte *s, int64 pos, byte c);
int64 String_IsLastCharADot(byte *s, int64 pos);
int64 String_FirstCharOfToken_FromPosOfLastChar(byte *s, int64 pos);
int64 String_IsThereADotSeparatorBackFromPosToLastNonDelmiter(byte *s, int64 pos);
int64 String_LastCharOfLastToken_FromPos(byte *s, int64 pos);
int64 String_FirstTokenDelimiter_FromPos(byte *s, int64 pos);
Boolean String_IsReverseTokenQualifiedID(byte *s, int64 pos);
byte *_String_UnBox(byte *token);
byte *_String_InsertColors(byte *s, Colors *c);
byte *String_New_RemoveColors(byte *str, uint64 allocType);
byte *_String_Insert_AtIndexWithColors(byte *token, int64 ndx, Colors *color);
byte *String_ReadLineToken_HighLight(byte *token);
void _String_AppendConvertCharToBackSlash(byte *dst, byte c, int64 *index, Boolean removeExtraSpacesFlag);
byte *_String_ConvertStringFromBackSlash(byte *dst, byte *src);
byte String_ConvertEscapeCharToSpace(byte c);
byte *_String_ConvertString_EscapeCharToSpace(byte *dst, byte *src);
byte *String_ConvertString_EscapeCharToSpace(byte *istring);
byte *_String_ConvertStringToBackSlash(byte *dst, byte *src, int64 nchars);
byte *String_ConvertToBackSlash(byte *str0);
Boolean Strcmp(byte *str0, byte *str1);
Boolean Stricmp(byte *str0, byte *str1);
Boolean Strncmp(byte *str0, byte *str1, int64 n);
int64 Strnicmp(byte *str0, byte *str1, int64 n);
void Strcpy(byte *dst, byte *src);
void Strncpy(byte *dst, byte *src, int64 n);
Boolean _C_Syntax_AreWeParsingACFunctionCall(byte *nc);
byte *strToLower(byte *dest, byte *str);
byte *String_RemoveEndWhitespace(byte *string);
byte *String_FilterMultipleSpaces(byte *istring, int64 allocType);
void String_InsertCharacter(CString into, int64 position, byte character);
void String_InsertDataIntoStringSlot(byte *str, int64 startOfSlot, int64 endOfSlot, byte *data);
byte *String_RemoveFinalNewline(byte *astring);
byte *String_N_New(byte *string, int64 n, uint64 allocType);
byte *String_New(byte *string, uint64 allocType);
byte *String_New_SourceCode(byte *string);
byte _String_NextNonDelimiterChar(byte *str0, byte *cset);
int64 _CFT_StrTok(byte *inBuffer);
byte *StringMacro_Run(byte *pb_namespaceName, byte *str);
void _CFT_StringMacros_Init(void);
void _CFT_StringMacros_Do(byte *buffer);
byte *_String_Get_ReadlineString_ToEndOfLine(void);
Boolean IsPunct(byte b);
int64 String_FindStrnCmpIndex(byte *sc, byte *name0, int64 wrli, int64 wl0, int64 inc);
byte *_String_HighlightTokenInputLine(byte *nvw, Boolean lef, int64 leftBorder, int64 tokenStart, byte *token, int64 rightBorder, Boolean ref);
int64 _IsString(byte *address, int64 maxLength);
byte *IsString(byte *address);
byte *String_CheckForAtAdddress(byte *address);
byte *String_CheckGetValueAtAddress(byte *address);
byte *String_DelimitSourceCodeStartForLispCfrTil(char *sc);
byte *Buffer_Data_Cleared(Buffer *b);
void Buffer_Init(Buffer *b, int64 flag);
void Buffer_Add(Buffer *b, int64 flag);
Buffer *Buffer_Create(int64 size);
Buffer *_Buffer_New(int64 size, int64 flag);
int64 Buffer_SetAsFree(Buffer *b, int64 force);
void Buffers_SetAsUnused(int64 force);
void Buffer_PrintBuffers(void);
Buffer *Buffer_New(int64 size);
Buffer *Buffer_NewLocked(int64 size);
Buffer *_Buffer_NewPermanent(int64 size);
byte *_Buffer_New_pbyte(int64 size, int64 flag);
byte *Buffer_New_pbyte(int64 size);
void _MemCpy(byte *dst, byte *src, int64 size);
/* src/basis/openVmTil.c */
int main(int argc, char *argv[ ]);
void openvmtil(int64 argc, char *argv[ ]);
void OpenVmTil_Run(int64 argc, char *argv[ ]);
OpenVmTil *_OpenVmTil_Allocate(void);
void OVT_RecycleAllWordsDebugInfo(void);
void _OpenVmTil_Init(OpenVmTil *ovt, int64 resetHistory);
void Ovt_RunInit(OpenVmTil *ovt);
void OpenVmTil_Delete(OpenVmTil *ovt);
void OVT_PrintStartupOptions(OpenVmTil *ovt);
void OVT_GetStartupOptions(OpenVmTil *ovt);
OpenVmTil *_OpenVmTil_New(OpenVmTil *ovt, int64 argc, char *argv[ ]);
/* src/basis/core/dobject.c */
byte *_object_Allocate(int64 size, int64 allocType);
dobject *dobject_Allocate(int64 doType, int64 slots, uint64 allocType);
void _dobject_Print(dobject *dobj);
void _DObject_C_StartupCompiledWords_DefInit(byte *function, int64 arg);
DObject *_CFT_Do_DynamicObject_ToReg(DObject *dobject0, uint8 reg);
void CFT_Do_DynamicObject(DObject *dobject0, Boolean reg);
void _DObject_ValueDefinition_Init(Word *word, uint64 value, uint64 objType, byte *function, int64 arg);
void DObject_Finish(Word *word);
Word *_DObject_Init(Word *word, uint64 value, uint64 ftype, byte *function, int64 arg);
Word *_DObject_New(byte *name, uint64 value, uint64 morphismType, uint64 objectType, uint64 lispType, uint64 functionType, byte *function, int64 arg, int64 addToInNs, Namespace *addToNs, uint64 allocType);
DObject *_DObject_FindSlot_BottomUp(DObject *dobject, byte *name);
DObject *_DObject_SetSlot(DObject *dobject, byte *name, int64 value);
void DObject_SubObjectInit(DObject *dobject, Word *parent);
DObject *DObject_Sub_New(DObject *proto, byte *name, uint64 objectAttributes);
void CFT_SetPropertiesAsDObject(void);
DObject *_DObject_NewSlot(DObject *proto, byte *name, int64 value);
void CFT_DObject_Clone(void);
void DObject_NewClone(DObject *proto);
void DObject_New(void);
/* src/basis/core/preprocessor.c */
void CFT_PreProcessor(void);
Ppibs *Ppibs_Init(Ppibs *ppibs);
Ppibs *Ppibs_New(void);
Boolean GetAccumulatedBlockStatus(int listStartIndex);
int64 GetElxxStatus(int64 cond, int64 type);
Boolean _GetCondStatus(void);
Boolean GetIfStatus(void);
Boolean GetElifStatus(void);
Boolean GetElseStatus(void);
Boolean _GetEndifStatus(void);
Boolean GetEndifStatus(void);
void SkipPreprocessorCode(Boolean skipControl);
void CFT_If_ConditionalInterpret(void);
void CFT_Elif_ConditionalInterpret(void);
void CFT_Else_ConditionalInterpret(void);
void CFT_Endif_ConditionalInterpret(void);
/* src/basis/lists.c */
void _Interpret_ListNode(dlnode *node);
void List_Interpret(dllist *list);
void List_InterpretLists(dllist *list);
void List_CheckInterpretLists_OnVariable(dllist *list, byte *token);
void _List_PrintNames(dllist *list, int64 count, int64 flag);
void _List_Show_N_Word_Names(dllist *list, uint64 n, int64 showBeforeAfterFlag, int64 dbgFlag);
/* src/basis/debugDisassembly.c */
ud_t *Debugger_UdisInit(Debugger *debugger);
int64 Debugger_Udis_GetInstructionSize(Debugger *debugger);
int64 _Debugger_Disassemble(Debugger *debugger, byte *address, int64 number, int64 cflag);
void Debugger_Disassemble(Debugger *debugger, byte *address, int64 number, int64 cflag);
void Debugger_Dis(Debugger *debugger);
void _Debugger_DisassembleWrittenCode(Debugger *debugger);
void Debugger_DisassembleAccumulated(Debugger *debugger);
void Debugger_DisassembleTotalAccumulated(Debugger *debugger);
/* src/basis/typeCheck.c */
Boolean TSI_TypeCheck_NonTypeVariable(TSI *tsi, Word *stackWord, int64 ti);
Boolean TSI_TypeCheck_TypeVariable(TSI *tsi);
Boolean TSI_TypeCheckAndInfer(TSI *tsi);
TSI *TSI_Init(TSI *tsi, Word *opWord);
TSI *TSI_New(Word *opWord, uint64 allocType);
void CFT_Typecheck(Word *opWord);
void TSI_Debug_PreTypeStatus_Print(TSI *tsi);
Boolean _TypeMismatch_CheckError_Print(Word *lvalueWord, Word *rvalueWord, Boolean quitFlag);
void TSI_TypeStatus_Print(TSI *tsi);
void TSI_ShowTypeErrorStatus(TSI *tsi);
void TSI_UpdateActualTypeStackRecordingBuffer(TSI *tsi, Word *word, Boolean prefixWithSeparatorFlag);
byte *Tsi_ExpandTypeLetterCode(byte typeCode, byte *buffer);
void Word_TypeChecking_SetSigInfoForAnObject(Word *word);
byte Word_DoesTypeSignatureShowAReturnValue(Word *word);
int64 Word_TypeSignatureLength(Word *word, Boolean numberOfParametersOnly);
byte *Word_TypeSignature(Word *word, byte *buffer);
byte *Word_ExpandTypeLetterSignature(Word *word, Boolean parametersOnly);
uint64 Tsi_ConvertTypeSigCodeToAttribute(byte signatureCode);
int8 Tsi_ConvertTypeSigCodeSize_Attribute(byte signatureCode);
int8 Tsi_ConvertTypeSigCodeSize_Attribute2(byte signatureCode);
int8 Tsi_ConvertTypeSigCodeToSize(byte code);
uint64 Tsi_ConvertTypeSigCodeToAttribute2(byte signatureCode);
byte Tsi_Convert_Word_TypeAttributeToTypeLetterCode(Word *word);
void Word_SetTypeNamespace(Word *word, int64 attribute);
void _CFT_TypeStackReset(void);
void CFT_TypeStackPrint(void);
void CFT_TypeStackReset(void);
void CFT_TypeStackPush(Word *word);
void CFT_TypeStack_SetTop(Word *word);
Word *CFT_TypeStack_Pop(void);
void CFT_TypeStack_Drop(void);
void CFT_TypeStack_Dup(void);
void CFT_TypeCheckOn(void);
void CFT_TypeCheckOff(void);
void CFT_DbgTypecheckOff(void);
void CFT_DbgTypecheckOn(void);
void CFT_ShowTypeWordStack(void);
int64 CFT_Get_ObjectByteSize(Word *word);
void CFT_Set_Namespace_ObjectByteSize(Namespace *ns, int64 obsize);
int64 CFT_Get_Namespace_SizeVar_Value(Namespace *ns);
/* src/basis/linux.c */
void _DisplaySignal(int64 signal);
void Linux_SetupSignals(sigjmp_buf *sjb, int64 startTimes);
void Linux_RestoreTerminalAttributes(void);
void Linux_SetInputMode(struct termios *savedTerminalAttributes);
void _LinuxInit(struct termios *savedTerminalAttributes);
void LinuxInit(void);
/* src/basis/exception.c */
void _OpenVmTil_ShowExceptionInfo(void);
int64 OpenVmTil_ShowExceptionInfo(void);
void OVT_PauseInterpret(Context *cntx, byte key);
int64 OVT_Pause(byte *prompt, int64 signalExceptionsHandled);
int64 _OpenVmTil_Pause(byte *msg);
void OpenVmTil_Pause(void);
void OVT_ResetSignals(int64 signals);
void _OVT_SigLongJump(sigjmp_buf *jb);
void OVT_SigLongJump(byte *restartMessage, sigjmp_buf *jb);
void OVT_SetRestartCondition(OpenVmTil *ovt, int64 restartCondition);
void OVT_Throw(int signal, int64 restartCondition, Boolean pauseFlag);
void OpenVmTil_Throw(byte *excptMessage, byte *specialMessage, int64 restartCondition, int64 infoFlag);
void _OpenVmTil_LongJmp_WithMsg(int64 restartCondition, byte *msg);
void OpenVmTil_SignalAction(int signal, siginfo_t *si, void *uc);
void CFT_Exception(int64 exceptionCode, byte *message, int64 restartCondition);
void CFT_SystemBreak(void);
void CFT_Quit(void);
void CFT_Abort(void);
void CFT_DebugStop(void);
void CFT_ResetAll(void);
void CFT_Restart(void);
void CFT_WarmInit(void);
void CFT_RestartInit(void);
void CFT_FullRestart(void);
void Error(byte *msg, uint64 state);
void OVT_ExceptionState_Print(void);
void _OVT_SimpleFinal_Key_Pause(OpenVmTil * ovt, Boolean useKey);
void OVT_SeriousErrorPause(void);
/* src/basis/compiler/locals.c */
int64 _ParameterVar_Offset(Word *word, int64 numberOfArgs, Boolean frameFlag);
int64 Compiler_ParameterVar_Offset(Compiler *compiler, Word *word);
int64 LocalVar_FpOffset(Word *word);
int64 LocalVar_Disp(Word *word);
int64 ParameterVar_Disp(Word *word);
int64 _LocalOrParameterVar_Offset(Word *word, int64 numberOfArgs, Boolean frameFlag);
int64 LocalOrParameterVar_Offset(Word *word);
int64 LocalOrParameterVar_Disp(Word *word);
Word *_Compiler_LocalWord(Compiler *compiler, byte *name, int64 morphismType, int64 objectType, int64 lispType, int64 allocType);
void Compiler_LocalsNamespace_New(Compiler *compiler);
Word *Compiler_LocalWord(Compiler *compiler, byte *name, int64 morphismAttributes, int64 objectAttributes, int64 lispAttributes, int64 allocType);
Boolean IsFrameNecessary(int64 numberOfNonRegisterLocals, int64 numberOfNonRegisterArgs);
Boolean Compiler_IsFrameNecessary(Compiler *compiler);
void Compile_Init_LocalRegisterParamenterVariables(Compiler *compiler);
void _Compiler_AddLocalFrame(Compiler *compiler);
void Compiler_SetLocalsFrameSize_AtItsCellOffset(Compiler *compiler);
void Compiler_RemoveLocalFrame(Compiler *compiler);
void CFT_LocalsAndStackVariablesBegin(void);
void CFT_LocalVariablesBegin(void);
/* src/basis/debugger.c */
Boolean DBG_Intrp_Loop_Test(Debugger *debugger);
void Debugger_InterpreterLoop(Debugger *debugger);
void Debugger_Setup_RecordState(Debugger *debugger, Word *word, byte *token, byte *address);
void Debugger_Setup_SaveState(Debugger *debugger, Word *word);
Boolean DBG_SHOULD_WE_DO_SETUP(Debugger *debugger, Word *word, byte *token, byte *address, Boolean forceFlag);
Boolean Debugger_PreSetup(Debugger *debugger, Word *word, byte *token, byte *address, Boolean forceFlag);
void _Debugger_PostShow(Debugger *debugger, Word *word, Boolean force);
void Debugger_PostShow(Debugger *debugger);
void _Debugger_Init(Debugger *debugger);
void Debugger_Init(Debugger *debugger, Cpu *cpu, Word *word, byte *address);
void Debugger_Off(Debugger *debugger, int64 debugOffFlag);
void Debugger_On(Debugger *debugger);
byte *Debugger_GetDbgAddressFromRsp(Debugger *debugger, Cpu *cpu);
byte *Debugger_GetStateString(Debugger *debugger);
void Debugger_Set_StartHere(Debugger *debugger);
void Debugger_NextToken(Debugger *debugger);
void Debugger_CurrentToken(Debugger *debugger);
void Debugger_Parse(Debugger *debugger);
void _Debugger_FindAny(Debugger *debugger);
void Debugger_FindAny(Debugger *debugger);
void Debugger_GotoList_Print(Debugger *debugger);
void Debugger_Print_LispDefinesNamespace(Debugger *debugger);
void Debugger_FindUsing(Debugger *debugger);
void _Debugger_PrintDataStack(int64 depth);
void Debugger_Variables(Debugger *debugger);
void Debugger_Using(Debugger *debugger);
void Debugger_Continue(Debugger *debugger);
void _Debugger_Eval(Debugger *debugger, Boolean continueFlag);
void Debugger_Eval(Debugger *debugger);
void Debugger_SetupNextToken(Debugger *debugger);
void Debugger_Info(Debugger *debugger);
void Debugger_DoMenu(Debugger *debugger);
void Debugger_Stack(Debugger *debugger);
void Debugger_ReturnStack(Debugger *debugger);
void Debugger_Source(Debugger *debugger);
void _Debugger_CpuState_Show(void);
void _Debugger_CpuState_CheckSave(Debugger *debugger);
void Debugger_CpuState_CheckSaveShow(Debugger *debugger);
void Debugger_Registers(Debugger *debugger);
void Debugger_Quit(Debugger *debugger);
void Debugger_Abort(Debugger *debugger);
void Debugger_Stop(Debugger *debugger);
void Debugger_InterpretLine_WithStartString(byte *str);
void Debugger_InterpretLine(void);
void Debugger_Escape(Debugger *debugger);
void Debugger_AutoMode(Debugger *debugger);
void Debugger_OptimizeToggle(Debugger *debugger);
void Debugger_CodePointerUpdate(Debugger *debugger);
void Debugger_Dump(Debugger *debugger);
void Debugger_Default(Debugger *debugger);
void _Debugger_State(Debugger *debugger);
void _Debugger_Copy(Debugger *debugger, Debugger *debugger0);
Debugger *Debugger_Copy(Debugger *debugger0, uint64 type);
void Debugger_Delete(Debugger *debugger);
Debugger *_Debugger_New(uint64 type);
void _CFT_Debug_AtAddress(byte *address);
void _CFT_DebugContinue(int64 autoFlagOff);
void Debugger_WordList_Show_All(Debugger *debugger);
void Debugger_WordList_Show_InUse(Debugger *debugger);
void Debugger_ShowTypeWordStack(Debugger *debugger);
void Debugger_Wdiss(Debugger *debugger);
void Debugger_TableSetup(Debugger *debugger);
/* src/basis/interpreter.c */
void Interpreter_Init(Interpreter *interp);
Interpreter *Interpreter_New(uint64 type);
void _Interpreter_Copy(Interpreter *interp, Interpreter *interp0);
Interpreter *Interpreter_Copy(Interpreter *interp0, uint64 type);
int64 Interpreter_IsDone(Interpreter *interp, uint64 flags);
/* src/basis/_debug.c */
byte *JccInstructionAddress_2Byte(byte *address);
byte *JccInstructionAddress_1Byte(byte *address);
byte *JumpCallInstructionAddress(byte *address);
byte *JumpCallInstructionAddress_X64ABI(byte *address);
void _CFT_ACharacterDump(char aChar);
void CFT_CharacterDump(byte *address, int64 number);
void _CFT_AByteDump(byte aByte);
void CFT_NByteDump(byte *address, int64 number);
byte *GetPostfix(byte *address, byte *postfix, byte *buffer);
void Compile_Debug_GetRSP(void);
void CFT_SetRtDebugOn(void);
void Compile_DebugRuntimeBreakpointFunction(block function);
void _CFT_DebugRuntimeBreakpoint(void);
void _CFT_DebugRuntimeBreakpoint_IsDebugShowOn(void);
void _CFT_DebugRuntimeBreakpoint_IsDebugOn(void);
/* src/basis/lc/lambdaCalculus.c */
ListObject *_LO_New_RawStringOrLiteral(Lexer *lexer, byte *token, int64 qidFlag, int64 tsrli, int64 scwi);
ListObject *_LO_New(uint64 lispAttributes, uint64 morphismAttributes, uint64 objectAttributes, byte *name, byte *value, Word *word, uint64 allocType, Namespace *addToNs, int64 tsrli, int64 scwi);
ListObject *_LO_First(ListObject *l0);
ListObject *_LO_Last(ListObject *l0);
ListObject *_LO_Next(ListObject *l0);
Word *LC_FindWord(byte *name, ListObject *locals);
Boolean LO_strcat(byte *buffer, byte *buffer2);
ListObject *_LO_CopyOne(ListObject *l0, uint64 allocType);
void _LO_ListInit(ListObject *l0, uint64 allocType);
ListObject *LO_ListNode_New(uint64 allocType);
ListObject *_LO_Copy(ListObject *l0, uint64 allocType);
void LC_EvalPrint(LambdaCalculus *lc, ListObject *l0);
ListObject *_LC_Read_ListObject(LambdaCalculus *lc, int64 parenLevel);
void _LC_ReadEvalPrint_ListObject(int64 parenLevel, int64 continueFlag, uint64 itemQuoteState);
void LC_ReadEvalPrint_ListObject(void);
void LC_ReadEvalPrint_AfterAFirstLParen(void);
void LC_ReadEvalPrint(void);
void LC_ReadInitFile(byte *filename);
void LO_Repl(void);
void LC_Read(void);
void LC_Eval(void);
void LC_DupList(void);
void _LC_SaveDsp(LambdaCalculus *lc);
void _LC_ResetStack(LambdaCalculus *lc);
void LC_RestoreStack(void);
void LC_SaveStack(void);
void LC_FinishSourceCode(void);
void _LC_ClearDefinesNamespace(LambdaCalculus *lc);
void LC_ClearDefinesNamespace(void);
void LC_Print_LispDefinesNamespace(void);
void LC_Print_LispNamespace(void);
void _LC_ClearTempNamespace(LambdaCalculus *lc);
void LC_ClearTempNamespace(void);
void LC_LispNamespacesOff(void);
void LC_LispNamespaceOn(void);
LambdaCalculus *_LC_Init_Runtime(LambdaCalculus *lc);
LambdaCalculus *LC_Init_Runtime(void);
LambdaCalculus *_LC_Init(LambdaCalculus *lc);
void LC_Delete(LambdaCalculus *lc);
LambdaCalculus *_LC_Create(void);
LambdaCalculus *LC_New(void);
void LC_On(void);
LambdaCalculus *LC_Reset(void);
LambdaCalculus *LC_Init(void);
/* src/basis/lc/apply.c */
ListObject *LO_Apply(LambdaCalculus *lc, ListObject *l0, ListObject *lfirst, ListObject *lfunction, ListObject *largs, Boolean applyFlag);
ListObject *_LO_Apply(ListObject *lfirst, ListObject *lfunction, ListObject *largs);
void _Interpreter_LC_InterpretWord(Interpreter *interp, ListObject *l0, Boolean functionFlag);
void _LO_CompileOrInterpret_One(ListObject *l0, int64 functionFlag);
void LO_CompileOrInterpretArgs(ListObject *largs);
void _LO_CompileOrInterpret(ListObject *lfunction, ListObject *largs);
ListObject *_LO_Do_FunctionBlock(ListObject *lfunction, ListObject *largs);
void LO_Substitute(ListObject *lambdaParameters, ListObject *funcCallValues);
ListObject *LO_PrepareReturnObject(void);
void LO_BeginBlock(void);
void LO_EndBlock(void);
void LO_CheckEndBlock(void);
int64 _LO_CheckBeginBlock(void);
int32 _LO_CheckBegunBlock(void);
int64 LO_CheckBeginBlock(void);
void Arrays_DoArrayArgs_Lisp(Word **pl1, Word *l1, Word *arrayBaseObject, int64 objSize, Boolean saveCompileMode, Boolean *variableFlag);
void _LO_Apply_ArrayArg(ListObject **pl1, int64 *i);
void _LO_Apply_NonMorphismArg(ListObject **pl1, int64 *i);
void _LO_Apply_Arg(LambdaCalculus *lc, ListObject **pl1, int64 *i);
ListObject *_LO_Apply_C_LtoR_ArgList(LambdaCalculus *lc, ListObject *l0, Word *word);
void LC_CompileRun_C_ArgList(Word *word);
block CompileLispBlock(ListObject *args, ListObject *body);
/* src/basis/lc/eval.c */
Boolean LO_IsQuoted(ListObject *l0);
ListObject *_LO_Eval(LambdaCalculus *lc, ListObject *l0, ListObject *locals, Boolean applyFlag);
ListObject *LO_EvalList(LambdaCalculus *lc, ListObject *l0, ListObject *locals, Boolean applyFlag);
ListObject *_LO_EvalSymbol(LambdaCalculus *lc, ListObject *l0, ListObject *locals);
ListObject *_LO_EvalList(LambdaCalculus *lc, ListObject *lorig, ListObject *locals, Boolean applyFlag);
/* src/basis/lc/read.c */
ListObject *_LO_Read(LambdaCalculus *lc);
ListObject *_LO_Read_Do_LParen(LambdaCalculus *lc);
ListObject *_LO_Read_DoWord(LambdaCalculus *lc, Word *word, int64 qidFlag, int64 tsrli, int64 scwi);
ListObject *_LO_Read_DoToken(LambdaCalculus *lc, byte *token, int64 qidFlag, int64 tsrli, int64 scwi);
ListObject *LO_Read_DoToken(LambdaCalculus *lc, byte *token, int64 qidFlag, int64 tsrli, int64 scwi);
void LC_QuoteQuasiQuoteRepl(uint64 itemQuoteState, Boolean doReplFlag);
void LO_Quote(void);
void LO_QuasiQuote(void);
void LO_UnQuoteSplicing(void);
void LO_Splice(void);
void LO_UnQuote(void);
void LO_SpliceAtTail(ListObject *lnew, ListObject *l0);
/* src/basis/lc/print.c */
void _LO_Print_Lambda_ToString(LambdaCalculus *lc, ListObject *l0, int64 printValueFlag);
void _LO_Print_NonLambdaSymbol_ToString(LambdaCalculus *lc, ListObject *l0, int64 printValueFlag);
void _LO_PrintOneToString(LambdaCalculus *lc, ListObject *l0, int64 in_a_LambdaFlag, int64 printSymbolValueFlag);
void _LO_PrintListToString(LambdaCalculus *lc, ListObject *l0, int64 lambdaFlag, int64 printValueFlag);
byte *LO_PrintListToString(LambdaCalculus *lc, ListObject *l0, int64 lambdaFlag, int64 printValueFlag);
void _LO_Print(ListObject *l0, byte *prefix, byte *postfix, Boolean valueFlag);
void _LO_PrintWithValue(ListObject *l0, byte *prefix, byte *postfix);
void LO_PrintWithValue(ListObject *l0);
void LC_PrintWithValue(void);
byte *_LO_PRINT_TO_STRING(ListObject *l0);
byte *_LO_PRINT_TO_STRING_WITH_VALUE(ListObject *l0);
void LO_Print(ListObject *l0);
/* src/basis/lc/special.c */
ListObject *_LO_Define(ListObject *idNode, ListObject *locals);
ListObject *_LO_MakeLambda(ListObject *l0);
ListObject *LO_SpecialFunction(LambdaCalculus *lc, ListObject *l0, ListObject *locals);
ListObject *LO_Lambda(ListObject *l0);
ListObject *_LO_Macro(ListObject *l0, ListObject *locals);
ListObject *LO_CompileDefine(ListObject *l0, ListObject *locals);
ListObject *LO_Define(ListObject *l0, ListObject *locals);
ListObject *LO_Set(ListObject *lfirst, ListObject *locals);
ListObject *LO_Let(ListObject *lfirst, ListObject *locals);
ListObject *_LO_Cons(ListObject *first, ListObject *second);
ListObject *LO_If(ListObject *l0, ListObject *locals);
ListObject *LO_Cond(ListObject *l0, ListObject *locals);
ListObject *_LO_List(LambdaCalculus *lc, ListObject *lfirst);
ListObject *LO_List(ListObject *lfirst);
ListObject *LO_Begin(ListObject *l0, ListObject *locals);
ListObject *LO_Car(ListObject *l0);
ListObject *LO_Cdr(ListObject *l0);
ListObject *_LC_Eval(ListObject *l0);
void _LO_Semi(Word *word);
Word *_LO_Colon(ListObject *lfirst);
ListObject *_LO_CfrTil(ListObject *lfirst);
/* src/primitives/strings.c */
void MultipleEscape(void);
void CFT_Strlen(void);
void CFT_Strcmp(void);
void CFT_Stricmp(void);
void CFT_StrCat(void);
void CFT_StrCpy(void);
void String_GetStringToEndOfLine(void);
/* src/primitives/bits.c */
void CFT_JMP(void);
void CFT_Compile_Jcc(void);
void CFT_Jcc_Label(void);
void CFT_JmpToHere(void);
void CFT_BitWise_NOT(void);
void CFT_BitWise_NEG(void);
void CFT_BitWise_OR(void);
void CFT_BitWise_OrEqual(void);
void CFT_BitWise_AND(void);
void CFT_BitWise_AndEqual(void);
void CFT_BitWise_XOR(void);
void CFT_BitWise_XorEqual(void);
void CFT_ShiftLeft(void);
void CFT_ShiftRight(void);
void CFT_ShiftLeft_Equal(void);
void CFT_ShiftRight_Equal(void);
/* src/primitives/maths.c */
void CFT_Plus(void);
void CFT_PlusPlus(void);
void CFT_MinusMinus(void);
void CFT_PlusEqual(void);
void CFT_MinusEqual(void);
void CFT_MultiplyEqual(void);
void CFT_DivideEqual(void);
void CFT_Minus(void);
void CFT_Multiply(void);
void CFT_Divide(void);
void CFT_Mod(void);
/* src/primitives/logics.c */
void CFT_LessThan(void);
void CFT_LessThanOrEqual(void);
void CFT_GreaterThan(void);
void CFT_GreaterThanOrEqual(void);
void CFT_Equals(void);
void CFT_DoesNotEqual(void);
void CFT_LogicalNot(void);
void CFT_LogicalAnd(void);
void CFT_LogicalOr(void);
void CFT_LogicalXor(void);
/* src/primitives/openvmtils.c */
void OpenVmTil_Verbosity(void);
void OpenVmTil_ShowMachineCodeInstructions(void);
void Ovt_Optimize(void);
void Ovt_Inlining(void);
void Ovt_AutoVar(void);
void Ovt_AutoVarOff(void);
void Ovt_AutoVarOn(void);
void OpenVmTil_HistorySize(void);
void OpenVmTil_DataStackSize(void);
void OpenVmTil_CodeSize(void);
void OpenVmTil_SessionObjectsSize(void);
void OpenVmTil_CompilerTempObjectsSize(void);
void OpenVmTil_ObjectsSize(void);
void OpenVmTil_DictionarySize(void);
void OpenVmTil_Print_DataSizeofInfo(int64 flag);
void OVT_ShowMemoryAllocated(void);
void OVT_Exit(void);
void OVT_StartupMessage(Boolean promptFlag);
void _OVT_Ok(Boolean promptFlag);
void OVT_Ok(void);
/* src/primitives/ios.c */
void Fflush(void);
void CFT_Kbhit(void);
void CFT_PrintString(void);
void CFT_NewLine(void);
void CFT_CarriageReturn(void);
void CFT_SPACE(void);
void CFT_TAB(void);
void _ConvertToBinary(uint64 n, byte *buffer, int16 size);
byte *_Print_Binary(uint64 n);
void Print_Binary(uint64 n);
void PrintfInt(int64 n);
void CFT_PrintInt(void);
void CFT_HexPrintInt(void);
void CFT_Emit(void);
void CFT_Key(void);
void CFT_LogOn(void);
void CFT_LogAppend(void);
void CFT_LogWrite(void);
void CFT_LogOff(void);
/* src/primitives/parsers.c */
void CFT_Token(void);
void CFT_TokenQID(void);
void CFT_FilenameToken(void);
void CFT_SingleQuote(void);
void CFT_Tick(void);
void Parse_SkipUntil_EitherToken_OrNewline(byte *end1, byte *end2);
void CFT_Parse(void);
void CFT_DoubleQuoteMacro(void);
void CFT_Word_ClassStructure_PrintData(Word *word);
/* src/primitives/interpreters.c */
void CFT_DoWord(void);
void CFT_CommentToEndOfLine(void);
void CFT_ParenthesisComment(void);
void CFT_Define(void);
void CFT_Interpreter_IsDone(void);
void CFT_Interpreter_Done(void);
void CFT_Interpreter_Init(void);
void CFT_InterpretNextToken(void);
void CFT_Interpret(void);
void CFT_InterpretPromptedLine(void);
void CFT_InterpretString(void);
void CFT_Interpreter_EvalWord(void);
void CFT_TokenToWord(void);
void CFT_InterpreterStop(void);
dllist *_CFT_Interpret_ReadToList(void);
void CFT_Interpret_ReadToList(void);
void CFT_Interpret_List(void);
/* src/primitives/namespaces.c */
void Do_Namespace_WithStatus_2(dlnode *node, MapFunction2 nsf, int64 nsStateFlag, int64 one, int64 two);
void _CFT_TreeMap(MapSymbolFunction2 msf2, uint64 state, int64 one, int64 two);
void _CFT_NamespacesMap(MapSymbolFunction2 msf2, uint64 state, int64 one, int64 two);
void _CFT_ForAllNamespaces(MapSymbolFunction2 msf2);
void Namespace_PrettyPrint(Namespace *ns, int64 indentFlag, int64 indentLevel);
void CFT_Namespace_New(void);
void _CFT_Namespace_NotUsing(byte *name);
void CFT_Namespace_NotUsing(void);
void CFT_Namespace_UsingFirst(void);
void CFT_Namespace_UsingLast(void);
void CFT_Namespace_SetStateAs_Using(void);
void CFT_Namespace_SetStateAs_NotUsing(void);
void CFT_PrintInNamespace(void);
void CFT_Namespaces(void);
int64 Word_RemoveIfStringContainsName(Symbol *symbol, byte *name);
void _CFT_Namespaces_PurgeWordIfContainsName(byte *name);
void CFT_Namespaces_PurgeWordIfContainsName(void);
int64 Word_RemoveIfStringEqualExactName(Symbol *symbol, byte *name);
void _CFT_Namespaces_PurgeWordExactName(byte *name);
void CFT_Namespaces_PurgeWordExactName(void);
void Symbol_SetNonTREED(Symbol *symbol, int64 one, int64 two);
void Symbol_Namespaces_PrintTraverse(Symbol *symbol, int64 containingNamespace, int64 indentLevel);
void Symbol_Namespaces_PrintTraverseWithWords(Symbol *symbol, int64 containingNamespace, int64 indentLevel);
void CFT_Namespaces_PrettyPrintTree(void);
void CFT_Namespaces_PrettyPrintTreeWithWords(void);
void _Namespace_Symbol_Print(Symbol *symbol, int64 printFlag, int64 str);
byte *_CFT_UsingToString(void);
void CFT_Using(void);
void CFT_NonCompilingNs_Clear(Compiler *compiler);
Word *_CFT_VariableGet(Namespace *ns, byte *name);
int64 _CFT_VariableValueGet(byte *nameSpace, byte *name);
void _CFT_RemoveNamespaceFromUsingListAndClear(byte *name);
void Namespace_RemoveNamespacesStack(Stack *stack);
void Namespace_RemoveAndClearNamespacesStack(Stack *stack);
/* src/primitives/systems.c */
void CFT_Jcc8_On(void);
void CFT_Jcc8_Off(void);
void CFT_InitTime(void);
void CFT_TimerInit(void);
void CFT_Time(void);
void CFT_Throw(void);
void _ShellEscape(char *str);
void ShellEscape(byte *str);
void ShellEscape_Postfix(void);
void _shell(void);
void shell(void);
void CFT_Filename(void);
void CFT_Location(void);
void CFT_LineNumber(void);
void CFT_LineCharacterNumber(void);
void _CFT_Version(Boolean flag);
void CFT_Version(void);
void CFT_SystemState_Print(void);
void _SetEcho(int64 boolFlag);
void CFT_Echo(void);
void CFT_EchoOn(void);
void CFT_EchoOff(void);
void CFT_NoOp(void);
void CFT_Hex(void);
void CFT_Binary(void);
void CFT_Decimal(void);
void CFT_Dump(void);
void CFT_Source_AddToHistory(void);
void CFT_Source_DontAddToHistory(void);
void CFT_AllocateNew(void);
void CFT_ReturnFromFile(void);
void CFT_ShellEscape(void);
void OVT_Mem_ShowAllocated(void);
/* src/primitives/compilers.c */
void CFT_Here(void);
void CFT_Code(void);
void CompileCall(void);
void CompileACfrTilWord(void);
void CompileInt64(void);
void Compile_Int32(void);
void Compile_Int16(void);
void Compile_Int8(void);
void Compile_N_Bytes(void);
GotoInfo *_GotoInfo_Allocate(void);
void GotoInfo_Remove(dlnode *node);
GotoInfo *GotoInfo_Init(GotoInfo *gotoInfo, byte *lname, uint64 type);
GotoInfo *GotoInfo_New(byte *lname, uint64 type);
void _CFT_CompileCallGoto(byte *name, uint64 type);
void _CFT_Goto(byte *name);
void _CFT_GotoLabel(byte *name);
void CFT_Goto(void);
void CFT_Goto_Prefix(void);
void CFT_Label(void);
void CFT_Label_Prefix(void);
void CFT_Return(void);
void CFT_Continue(void);
void CFT_Break(void);
void CFT_SetupRecursiveCall(void);
void CFT_Literal(void);
void CFT_Constant(void);
void CFT_Variable(void);
void CFT_LeftBracket(void);
void _CFT_RightBracket(void);
void CFT_RightBracket(void);
void CFT_AsmModeOn(void);
void CFT_AsmModeOff(void);
void CFT_CompileMode(void);
void CFT_FinishWordDebugInfo(void);
/* src/primitives/words.c */
void _CFT_Colon(Boolean initSC);
void CFT_Colon(void);
Word *CFT_WordInitFinal(void);
void CFT_SemiColon(void);
void AddressToWord(void);
void Word_Definition(void);
void Word_Value(void);
void Word_Xt_LValue(void);
void Word_DefinitionEqual(void);
void Word_CodeStart(void);
void Word_CodeSize(void);
void CFT_Word_Run(void);
void CFT_Word_Eval(void);
void Word_Finish(void);
byte *_Word_Begin(void);
void Word_Add(void);
void CFT_Word_New(void);
void CFT_Word(void);
void CFT_Alias(void);
void CFT_TextMacro(void);
void CFT_StringMacro(void);
void Word_Name(void);
Location *Location_New(void);
void _Location_Printf(Location *loc);
void CFT_Location_Printf(void);
void Location_PushNew(void);
void CFT_Do(void);
void CFT_Does(void);
void Word_Namespace(void);
void CFT_Keyword(void);
void CFT_Immediate(void);
void CFT_Syntactic(void);
void CFT_IsImmediate(void);
void CFT_Inline(void);
void CFT_Set_TypeSignature(void);
void CFT_Prefix(void);
void CFT_NPrefix(void);
void CFT_C_Prefix(void);
void CFT_C_Return(void);
void CFT_Void_Return(void);
void CFT_RAX_Return(void);
void CFT_DebugWord(void);
void Symbol_Print(Symbol *symbol);
void Symbol_List_Print(dllist *list);
void _PrintWord(dlnode *node, int64 *n);
void _Words(Symbol *symbol, MapFunction1 mf, int64 n);
void _DoWords(Symbol *symbol, int64 *n);
int64 _CFT_PrintWords(int64 state);
void CFT_Words(void);
void _Variable_Print(Word *word);
void _PrintVariable(dlnode *node, int64 *n);
void _Variables(Symbol *symbol, MapFunction1 mf, int64 n);
void _PrintVariables(Symbol *symbol, int64 *n);
int64 _CFT_PrintVariables(int64 nsStatus);
void CFT_Variables(void);
void _CFT_NamespaceWords(void);
void CFT_NamespaceWords(void);
void CFT_AllWords(void);
/* src/primitives/file.c */
void CFT_IncludeFile(void);
int64 _File_Size(FILE *file);
int64 _File_Exists(byte *fname);
byte *_File_ReadToString_(FILE *file);
byte *_File_ReadToString(byte *name);
void File_ReadToString(void);
void File_Open(void);
void File_Close(void);
void File_Read(void);
void File_Write(void);
void File_Seek(void);
void File_Tell(void);
void File_Size(void);
void File_Exists(void);
/* src/primitives/stacks.c */
void CFT_Dsp(void);
void CFT_Drop(void);
void CFT_DropN(void);
void CFT_Dup(void);
void CFT_NDup(void);
void CFT_Pick(void);
void CFT_Swap(void);
void CFT_PrintNDataStack(void);
void CFT_PrintReturnStack(void);
void CFT_PrintNReturnStack(void);
void CFT_PrintNDataStack_8(void);
/* src/primitives/debuggers.c */
void CFT_Debug_AtAddress(void);
void _CFT_Debugger_Locals_Show(void);
void CFT_Debugger_Locals_Show(void);
void _CFT_DebugInfo(void);
void CFT_DebugInfo(void);
void CFT_DebugOn(void);
void CFT_DebugOff(void);
void DebugRuntimeBreakpoint(void);
void CFT_DebugRuntimeBreakpoint(void);
void CFT_DebugRuntimeBreakpoint_IsDebugShowOn(void);
void CFT_DebugRuntimeBreakpoint_IsDebugOn(void);
void _DEBUG_SETUP(Word *word, byte *token, byte *address, Boolean force);
/* src/primitives/memorys.c */
void CFT_Peek(void);
void CFT_PeekReg(void);
void CFT_PokeRegWithValue(void);
void CFT_PokeRegAtAddress(void);
int Word_LvalueObjectByteSize(Word *lvalueWord, Word *rValueWord);
void Do_MoveErrorReport(int64 value, byte *one, byte *two);
void _CFT_Move(int64 *address, int64 value, int64 lvalueSize);
void CFT_Poke(void);
void CFT_AtEqual(void);
void CFT_Store(void);
/* src/primitives/primitives.c */
/* src/primitives/contexts.c */
void CFT_Contex_New_RunWord(void);
/* src/primitives/disassembler.c */
void Word_Disassemble(Word *word);
void _CFT_Word_Disassemble(Word *word);
void CFT_Word_Disassemble(void);
void Debugger_WDis(Debugger *debugger);
void CFT_Disassemble(void);
/* src/primitives/syntaxes.c */
void CFT_InfixModeOff(void);
void CFT_InfixModeOn(void);
void CFT_PrefixModeOff(void);
void CFT_PrefixModeOn(void);
void CFT_C_Syntax_Off(void);
void CFT_PostfixModeOn(void);
void CFT_C_Syntax_On(void);
void CFT_AddressOf(void);
void CFT_C_Semi(void);
void CFT_C_Comma(void);
void CFT_End_C_Block(void);
void CFT_Begin_C_Block(void);
Namespace *CFT_C_Class_New(void);
void CFT_C_Infix_Equal(void);
void CFT_If_PrefixCombinators(void);
void CFT_DoWhile_PrefixCombinators(void);
void CFT_For_PrefixCombinators(void);
void CFT_Loop_PrefixCombinators(void);
void CFT_While_PrefixCombinators(void);
void _CFT_Typedef(void);
void CFT_TypedefStructEnd(void);
/* src/primitives/cmaths.c */
void CFT_Power_03(void);
int64 _CFib_O3(int64 n);
void CFib_O3(void);
int64 _CFib2_O3(int64 n);
void CFib2_O3(void);
void CFactorial_O3(void);
int64 _CFactorial_O3(int64 n);
void CFactorial2_O3(void);
void CFactorial3_O3(void);
int64 _CFib(int64 n);
void CFib(void);
void CFT_Power(void);
void CFactorial(void);
int64 _CFactorial(int64 n);
void CFactorial2(void);
void CFactorial3(void);
void ctct(void);
/* src/primitives/dataObjectNews.c */
void CFT_Class_New(void);
void CFT_Class_Value_New(void);
void CFT_Class_Clone(void);
void CFT_DObject_New(void);
Namespace *CFT_Type_New(void);
int64 Type_Create(void);
void CFT_Typedef(void);
