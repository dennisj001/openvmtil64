5 // stack checking marker
jcc8_On
//typecheckOn dbgTypecheckOn
: sp ; //stack pause ; 
//verbosity 0 = 
// logOn
verbosity 1 = 
Debug
: d: _dbgOn dbgSourceCodeOn ; immediate debugWord // a debugWord has special behavior : doesn't interfere with optimization
"OptimizeOn" variable
OptimizeOn 1 = 
#if OptimizeOn @
optimizeOn inlineOn
#else
optimizeOff inlineOff
#endif
Root 
: ' _tick ; immediate
: find _find ; immediate
: findAny _findAny ; immediate
//_dbgOn 'tick ' _tick find alias immediate
'tick ' _tick find alias immediate
'ndrop '_ndrop find alias immediate 
'forth 'postfixOn find alias
'cOn 'c_syntaxOn find alias
'cOff 'c_syntaxOff find alias
"log" variable 
"User" namespace 
Io Int
: _ps printString ; inline
: ps space _ps ; "S.V" typeSignature
: prints _ps ;
: pn intPrint ;
: _p intPrint ;
: p space intPrint ;
'_hp 'hexIntPrint find alias
: hp space _hp ;
: print space intPrint ;
"nl" ' newline find alias keyword
: _logWrite "cfrTil.log" logWrite ;
: _logAppend "cfrTil.log" logAppend ;

// aliases 
User
"const" ' constant find alias
"_const" ' _constant find alias
"var" ' variable find alias
"_var" ' _variable find alias
Debug
//"dbg" '_dbg find alias immediate debugWord
"dbrk" ' <dbg> find alias debugWord
"locals" 'localsShow find alias
"regs" 'cpuStateShow find alias
't: 'dbgTypecheckOn find alias 
';t 'dbgTypecheckOff find alias
'tcOn 'typecheckOn find alias 
'tcOff 'typecheckOff find alias
'nt 'namespaceTreeWithWords find alias
'dscOn 'dbgSourceCodeOn find alias
'dscOff 'dbgSourceCodeOff find alias
'scOn 'dscOn find alias
'scOff 'dscOff find alias
scOn 

'tcOnv var 
tcOnv 1 =
#if tcOnv
tcOn
#endif

: v4 verbosity 4 = ; 
: v1 verbosity 1 = ;

User
"wdis" ' wordDisassemble find alias
'ts 'showTypeWordStack find alias
's 'stack find alias
: p space intPrint ;
'dbgOnVar var 
'dbOn 'dbgOnVar find alias
: dbgOn dbgOnVar 1 = ;
: dbgOff dbgOnVar 0 = ;
: Is_DebugOn dbgOnVar @ ;
dbgOff
User
#if Is_DebugOn
: mp mem pause ;
: sp stack pause ;
#else
: mp ; //mem pause ;
: sp ; //stack pause ;
#endif

Combinators
"ix" ' call find alias immediate
"qEval" ' call find alias immediate
"ifte" ' tf3 find alias
"ifElse" ' tf3 find alias
'startupMacros 1 constant
User
#if startupMacros
: _SMN_ "StartupMacros" ;                           // _SMN_ : string startup macros namespace 
"StartupMacros" namespace                           // create a namespace for string macros to be used 
StartupMacros                                       // switch to that namespace
: Delimiters "/" ;                                  // set delimiters to be used with string macros
// "_startDirectory_" variable                      // created and set in CfrTil_ResetAll_Init
: namespaces _startDirectory_ @ ;                   // this line also works in place of the next line
                                                    // '_startDirectory_' is a variable created in the function 
                                                    // CfrTil_ResetAll_Init in the file init.c
//: namespaces "/usr/local/lib/cfrTil64/namespaces" ; // our currently only ?!overloaded!? string macro allowing 
                                                    // us to parameterize the startup; can be properly started 
                                                    // in any directory now if it is installed with 'make install' 
                                                    // in "/usr/local/lib/cfrTil"
// stringMacrosOn                                   // turn on the macros; doesn't work if not initialized like eg. above initialization
                                                    // nb. we don't turn it on here until about line 304
// stringMacrosOff                                  // turn off the macros
#endif
Lexer User 

// nb. there is still some (alot of) old junk here and especially in the test files and some of the comments may not apply anymore ...
// echoOn
// verbosity 1 = 
//autoVarOn
Debug
"DebugFlag" variable
DebugFlag 0 =
: dbiOn dbi 1 = ;
: dbiOff dbi 0 = ;

Compiler 
// nb :: .'"[] :: these five characters - dot, tick, quote left bracket, right bracket - .'"[] - are character macros including the brackets they work at the char level in readline
// set up some traditional Forth words from internal primitives
// core internal c defined words : begin _end token _tick _immediate definition compile constant variable alias compileModeOn wordInit wordAdd wordFinish
//quote ' quote quote find alias _immediate
"'" quote quote find alias _immediate
"immediate" ' _immediate find alias _immediate
"compileWord" ' _compileWord find alias immediate
"compileCall" ' _compileCall find alias immediate
"swap" ' _swap find alias immediate
Interpreter 
"{" ' begin find alias immediate keyword
"end" ' _end find alias immediate
"}" ' end find alias keyword
"xt@" { xt @ } word immediate // ' definition alias immediate
"_semi" wordNew { xt= wordFinish } xt= wordFinish 
"semi" wordNew { _end _semi } _semi 
";" ' semi find alias immediate syntactic
: word swap wordNew swap _semi ;  //'word wordDisassemble pause
//: word ( name block ) name @ wordNew block @ _semi ;  // works but it is 10 bytes more code
//'word find wdis //pause
":" { compileModeOn sourceCodeInit token wordNew begin } word // immediate // begin is not an immediate word

C
: ;; semi _prefix ; immediate syntactic
c_syntaxOn 
type int8 ; int8.size = 1 ;
type uint8 ; uint8.size = 1 ;
type byte ; byte.size = 1 ;
type int16 ; int16.size = 2 ;
type uint16 ; uint16.size = 2 ;
type int32 ; int32.size = 4 ;
type uint32 ; uint32.size = 4 ;
type int64 ; int64.size = 8 ;
type uint64 ; uint64.size = 8 ;
type void ; void.size = 0 ;
type char ; char.size = 1 ;
type int ; int.size = 8 ;
type long ; long.size = 8 ;
type quad ; quad.size = 16 ;
type Boolean ; Boolean.size = 1 ;
c_syntaxOff

BigNum
: fprint space _fprint ;
'p 'fprint find alias
: eprint space _eprint ;
// pPrecision : this sets the number of digits to be printed after the decimal point" 
// pWidth : sets the "Minimum number of characters to be printed. If the value to be printed is shorter than this number, 
// the result is padded with blank spaces. The value is not truncated even if the result is larger."
: bnInit ( precision width ) precision @ pPrecision width @ pWidth ;; 
//'bnInit find wdis 
bnInit ( 16 16 )
Root
: bigNumOff "BigNum" notUsing ;
'bnOff 'bigNumOff find alias
: bnOn BigNum bnInit ( 16 16 ) ;
bnOff

Compiler
scOn 
: var: { token dup ";" strcmp } { _var } while drop ; immediate // nb : no quotation marks around variable names with var: ... ; 
var: DebugFlag classTestRead streamLine doInit1 doDemo doTest doLisp COMBINATOR_TOOKIT doLisp testing testLisp x Zenfone2 ; // _TestDone_ ; 
: nstrcat: "" { token dup ";" strcmp } { strcat " " strcat } while drop ; immediate // nb : no quotation marks around names
"mod" 'modulo find alias

Namespace
: using: { token dup ";" strcmp } { usingFirst } while drop ; // eg - "using: User Lisp ;"
: notUsing: { token dup ";" strcmp } { notUsing } while drop ; 
: usingLast: { token dup ";" strcmp } { usingLast } while drop ; 
notUsing: PrefixCombinators C Lisp ;
sp
System
"Black" 0 const
"Red" 1 const
"Green" 2 const
"Yellow" 3 const
"Blue" 4 const
"Magenta" 5 const
"Cyan" 6 const
"White" 7 const
"Default" 9 const
//: netbeans Blue Default setDebugColors ; : nnb Blue Black setDebugColors ; // netbeans // nnb

Root
"fr" 'fullRestart find alias
"ri" 'restartInit find alias
'purge 'purgeWordName find alias
'purgeAll 'purgeWordIfContainsName find alias
System
"true" 1 const
"false" 0 const
"T" 1 const
"F" 0 const

Debug
// make immediate/word immediate - compile time versions of some words
//: d: _dbgOn ; immediate debugWord // a debugWord has special behavior : doesn't interfere with optimization
: _s stack ; 
: s stack ; immediate
: sinit stackInit ; 
: dcm decimal ; immediate // a non hex interpreted word
//: iun using stack namespaceTree ; immediate
: slp "stack at " ps location stack _pause ;
'rdi 'recycleDebugInfo find alias
C
: logWrite ( str ) _logWrite nl str @ ps nl ;
: logAppend ( str ) _logAppend nl str @ ps nl ;

Word 
: code definition ;
//verbosity 2 =
C
System
: location filename ps space decimal lineNumber _p "." _ps charNumber _p ;
: pdl  "-----------------------------" ps ;
: pel  "=============================" ps ;
: _source ( addToHistoryFlag  pword )
    { addToHistoryFlag @ } { pword @ sourceAdd } { pword @ sourceDontAdd } ifElse 
;;
jcc8_Off
: _wdiss ( addToHistoryFlag pword ) 
    nl pel 
    _source ( addToHistoryFlag @ pword @ ) nl pdl 
    pword @ wdis 
    { pword @ } 
    { nl "Word :" _ps hex pword p ":: Compiled at :" ps pword @ definition p decimal } if
    nl pel decimal 
    nl "::> 'wdiss' was called at" _ps location "<::" ps nl
;;
jcc8_On
: wdiss ( pword ) _wdiss ( 0 pword @ ) ; //debugWord      // don't add wdiss words to history list
//: wdiss ( pword ) 0 pword @ _wdiss ; //debugWord      // don't add wdiss words to history list
: wdissl ( pword ) logOn _wdiss ( 0 pword @ ) logOff ; //debugWord      // don't add wdiss words to history list
'wi ' wdiss find alias
: pwdiss token _find wdiss ;
'pwi 'pwdiss find alias
: fload ftoken include ;
//' wdiss find _wdiss
: sys mem namespaces words stack using in ; 
'aw 'allWords find alias
: stk stack ; //debugWord 
: ti timerInit ;
: ahalt stop ;
: vb ( n ) verbosity n @ = ; : vb3 3 vb ; : vb2 2 vb ; : vb1 1 vb ; : vb0 0 vb ;
: sOff vb1 inlineOff optimizeOff ;
: sOn vb3 inlineOn optimizeOn ;
"ahOn" ' addToHistoryOn find alias
"ahOff" ' addToHistoryOff find alias
: adps ( s ) alertColors s @ ps defaultColors ;
: ddps ( s ) debugColors s @ ps defaultColors ;
//dbgOnVar 1 = 
#if Is_DebugOn
dscOn //verbosity 3 =
#endif
'dbgTest 0 const
#if dbgTest
//verbosity 2 =
: debugTest3 ( n ) n @ 1 2 + + p <dbg> stack ;
//: debugTest3 1 2 + p <dbg> stack ;
' debugTest3 find wdiss
: debugTest2 1 2 + p 4 debugTest3 ;
: debugTest1 1 2 + p debugTest2 ;
: debugTest 1 2 + p debugTest1 ;
: _assert1 ( n m str ) { n @ m @ != } { str @ ? str @ ps : drop "error" ps _info stack _pause } { debugTest } ifElse ; 
#else
: _assert1 ( n m str ) { n @ m @ != } { str @ ? str @ ps : drop "error" ps _info stack _pause } if ; 
//: _assert1 ( n m str ) { n @ m @ != } { str @ ps "error" ps _info _pause } if ;
#endif
//: ctloc do> locationPush does> locationPrint <do ; immediate // compile time location
jcc8_Off
: _assert0 ( n m ) { n @ m @ != } { nl location hex n @ p "!=" ps m @ p "<:" ps "Error!" adps _info _pause } { } ifElse ; //{ str @ ps " : ok\n" ps nl } ifElse ; // no "ok" with this word
: _assert ( n m ) nl  nl "_assert ::" ps { n @ m @ != } { n @ p "!=" ps m @ p "<:" ps "Error!" adps _info _pause } { " ok\n" ps nl } ifElse ;
: assert1s ( s1 s2 str ) { s1 @ s2 @ strcmp } { nl str @ ps "error" ps _info _pause } if ;
: assert0 ( n m ) { n @ m @ != } { nl "error" ps _info _pause } if ; 
"assert" ' _assert1 find alias
"assert1" ' _assert1 find alias
"_assert" ' _assert0 find alias
: _assertStkChk ( n m | str )  
    { verbosity @ }
    {
        { DebugFlag @ } 
        { 
            debugColors
            str "\n assertStkChk ::" = 
            { n @ m @ == }
            { nl location ":" ps str @ ps "ok : " ps n @ p "==" ps m @ p nl } //stack pause } 
            { tab nl location ":" ps str @ ps alertColors "\n Error!\n" ps n @ p "!=" ps m @ p nl stack pause nl } //quit } 
            ifElse 
            defaultColors 
        } 
        { 
            //"\nassertStkChk : " ps n @ p m @ p 
            n @ m @ _assert0
        }
        ifElse
    } if2
    //stack pause
; 
jcc8_On
//' _assertStkChk find wdiss //pause
: assertStkChk _assertStkChk ; //"\n_assertStkChk : " ps stack pause ; 
Root
User 
: pause nl _pause ;
: opOff optimizeOff inlineOff state ;
: opOn1 optimizeOn inlineOn { verbosity @ 1 > } { state } if ; //'opOn1 find wdiss //pause
: vck ( n w ) { verbosity @ n @ != } { verbosity n @ = w @ _find wordRun } if2 ; // for testing
//'vck find wdiss //pause
: opOn ( n )
    optimizeOn inlineOn 
    n @ ' state literal vck  // literal pops the stack and turns 'state into a string -- for testing
;
//' opOn find winfo //pause 2 opOn 1 opOn 

"s" ' stack find alias
"istring" ' interpretString find alias 
"def" ' word find alias 
Compiler
">;" ' >? find alias

Root C
"allot" ' allocateMem find alias

: include1 _dup debugColors "\n'include'" ps ps " :: at :" ps location nl defaultColors sp include  ;
Debug
#if ( DebugFlag @ )
: s stack alertColors location defaultColors ;
: include include1 debugColors "location :" ps location nl defaultColors ;
vb3
#endif
Interpreter
'_defined '_find find alias 
' defined '_find find alias immediate 
C Compiler Int Lexer
: orpfile ( name | file input result )
    input 0 =
    "open/read/print :: " ps name @ ps nl
    file name @ fopen =
    nl { result file @ input 1 fread = input @ emit } { result @ 1 == } doWhile 
    file @ fclose
; prefix
//'orpfile find wdiss
Root
: license orpfile ( "./LICENSE" ) ;
//license //pause
Lisp OpenVmTil
: lispOff "Lisp" notUsing "LispTemp" notUsing "LispDefines" notUsing ; //lcReset ;
: lispOn lcOn ;
postfixOn 
Root
sp 
: sh _sh ; prefix

//================================================================================

#if startupMacros
stringMacrosOn
#endif

// rtw : recycle some test/debug words 
: rtw "test" purgeAll "hi" purge "hey" purge "heey" purgeAll "hey1" purge "hey2" purge "heey1" purge "heey2" purge "sp" purge "moe" purge ;
: tCfrTil "namespaces/ninit.cft" include ; // namespaces init
: tc tCfrTil rtw ;
: x64 "namespaces/compiler/x64.cft" include ; 
: bx "namespaces/test/bigNum.test.cft" include ;
: TODO ( str ) nl nl pdl nl str @ adps location nl pdl nl nl { dbgOnVar @ } { sp } if2 ;; //pause ;;
lispOff
// === controls ===
Root 
dbgOff
//dbgOn 
'todo 0 const  
'doX64 1 const
'doTX64 1 const
'doScript 1 const
'doScript2 1 const
'_doDemo 0 const    
// === controls ===

#if Is_DebugOn 

#if todo
: _TODO ( str ) TODO ( str @ ) ;;
: TODO ( str ) _TODO ( str @ ) pause ;;
#endif

System C
fload test.txt //pause
tc 
//demo
//x64
//tx64


#if _doDemo 
demo 
#endif //dT0
rtw

stringMacrosOff

#else // !Is_DebugOn : of course you can trim this file to your needs and put your init code maybe here if you like
: mct "namespaces/compiler/machineCode.cft" include ;

'doInitTest 1 const
#if doInitTest
// startup test code here ...
#if tcOnv @
//tc demo
//fload nt.cft
//mct
//#elif 1
jcc8_On
User
: factorial ( REG n | REG rec -- RAX ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return rec ;
7  factorial p
'factorial find wdiss
// test byte size objects
c_syntaxOn
typedef struct _byteTest 
{
    byte a123;
    int64 e123
    byte b123;
    byte bb123 ;
    int32 c123;
    byte d123;
    int16 f123;
} byteTest ;
'bt byteTest new ;
ps ( "\nbt.size =" ) ; p ( bt.size ) ;
bt.a123 = 1 ; bt.b123 = 2 ; bt.c123 = 2147483647 ; bt.d123 = 4 ; bt.bb123 = 3 ; bt.f123 = 0x1234 ; dump ( bt, bt.size ) ; 
var ( 'btt ) ; 
void bttt ( ) { btt = bt.a123 ; printf ("btt = %x", btt ) ; } bttt () ; // error size not considered
bt.a123 = 255 ; dump ( bt, bt.size ) ; //pause
'bt byteTest new ;
binary () ; p ( bt.b123 ) ; decimal () ; bt.b123 = 123 ; binary () ; p ( bt.b123 ) ; decimal () ; //pause
p (bt.a123) ; p (bt.b123) ; p (bt.c123) ; p (bt.d123) ; 
bt.a123 = 1 ; bt.b123 = 2 ; bt.c123 = 2147483647 ; bt.d123 = 4 ; bt.bb123 = 3 ; bt.f123 = 1234 ; bt.e123 = 0x123456789abcdef ;
dump ( bt, bt.size ) ;
bt.a123 1 _assert 
bt.c123.size 4 _assert
bt.e123.size 8 _assert
_assert ( bt.c123, 2147483647 ) ;

//pause
dbiOn
int
fac5 ( REG n  | REG facc ) 
{ 
    facc = 1 ;
    while ( n > 1 ) 
    {
        facc = facc * (n --) ; // parenthesis a must for now ??
    }
    return facc ;
}
dbiOff
wdiss ( ' fac5 find ) 
fac5 ( 7 ) dup p 5040 _assert  
c_syntaxOff 
#endif
#endif // #else

bnOff
Shell

#endif
infixOn
(1 + 5) / (2 + 1) 2 _assert
infixOff
jcc8_Off 
rtw
'test 'tc find alias //nb! after rtw which removes all words "test", etc.

2 + 7 assertStkChk // stack checking 
